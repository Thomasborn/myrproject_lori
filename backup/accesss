const jwt = require('jsonwebtoken');
const secretKey       = process.env.Key;
const prisma = require("../db");
const hak_akses = require("../hak_akses/hak_akses.service")

  // const role_permission = async (userData) => {
  //   try {
  //     const permissions = await prisma.hak_akses.findMany({
  //       where: {
  //         role_id: userData, // Assuming `userData` contains the user's role_id
  //       },
  //     });
  //     return permissions;
  //   } catch (error) {
  //     // Handle any potential errors, e.g., database query errors
  //     console.error('Error fetching user permissions:', error);
  //     return [];
  //   }
  // };
  const adminMiddleware = (req, res, next) => {
    // Check if the user has admin permissions
    // const url = req.url;
    // const permissions =  req.userPermissions;
    // console.log(permissions);
    
    //   res.status(401).json({ message: `Akses tidak dimiliki untuk ${url}`,permissions: permissions });
    
    
  };
  
  // Define other role-specific middleware functions as needed
  const ownerMiddleware = (req, res, next) => {
   
    
  

    // Implement logic for the owner role
  };
  
  const qcMiddleware = (req, res, next) => {
    // Implement logic for the QC role
  };
  
  const penjahitMiddleware = (req, res, next) => {
    // Implement logic for the penjahit role
  };
  
  const checkAuth = async (req, res, next) => {
    // You should obtain the user's role_id from your authentication mechanism
    // const userData = 1; // Replace with the actual user's role_id
    // res.json({ message: 'Akses tidak dimiliki 2',userData });
    
    try {
      const userData = parseInt(req.session.user.role_id);
 
  
      if(userData){
        const url = req.url;
        const method = req.method;
        
        // const permissions =  req.userPermissions;
        const userData = parseInt(req.session.user.role_id);
        const permissions = await hak_akses.getHakAksesByRoleId(userData);
           for (const permission of permissions) {
          const fungsiNama = permission.fungsi.nama;
          let aksesNama = permission.akses.nama;
          const methodMappings = {
            'read': 'get',
            'create': 'post',
            'update': 'put',
            // Add more mappings as needed
          };
      
          if (methodMappings.hasOwnProperty(aksesNama)) {
            aksesNama = methodMappings[aksesNama];
          }
          // Do something with fungsiNama and aksesNama
          // console.log(`Fungsi: ${fungsiNama}, Akses: ${aksesNama}`);
          console.log("valu1 contains 'detail-model'",aksesNama,method);
          if((url.includes(fungsiNama)&&aksesNama==method)||(url.includes(fungsiNama)&&aksesNama=="crud"))
          {
          
      console.log("valu1 contains 'detail-model'",aksesNama);
            next();
            return;
          }
        }
        // }
        
    
          res.status(403).json({ message: `Akses tidak dimiliki untuk ${url}`,permissions: permissions });
        
    
        
      // Store permissions in the request object
      // res.send({data:role_permission})// Proceed to the next middleware or route
      } else {
        // User doesn't have the required permissions
        res.status(401).json({ message: 'Akses tidak dimiliki 2' ,userData});
      }
    } catch (error) {
      // Handle any potential errors, e.g., fetching permissions failed
      console.error('Error checking user permissions:', error);
      res.status(500).json({ message: 'Sedang terjadi kesalahan di server, silahkan coba beberapa saat lagi' });
    }

  // // next();
  //   try{
  //     const userData = parseInt(req.session.user.karyawan.role_id);
      
  //     // return res.status(401).json({ message: 'Akses tidak dimiliki' ,user:userData});
  //     // if(!userData){
  
  //     //   return res.status(401).json({ message: 'Akses tidak dimiliki' ,user:userData});
  //     // }
   
  //   // change into role
  // 

    
   

  
  
};

module.exports = checkAuth;
