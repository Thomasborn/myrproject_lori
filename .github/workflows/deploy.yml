name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

  deploy-development:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'  # Deploy only on development branch

    steps:
    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Debug Environment Variables
      run: |
        echo "SERVER_IP: ${{ secrets.SERVER_IP }}"
        echo "SSH_USERNAME: ${{ secrets.SSH_USERNAME }}"
        echo "APP_PATH_DEV: ${{ secrets.APP_PATH_DEV }}"

    - name: Deploy to Development Server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        APP_PATH: ${{ secrets.APP_PATH_DEV }}
        REPO_URL: ${{ secrets.REPO_URL }}
      run: |
        sshpass -p $SSH_PASSWORD ssh -tt -o StrictHostKeyChecking=no $SSH_USERNAME@$SERVER_IP <<EOF
          echo "Checking if $APP_PATH is a Git repository..."
          
          if [ -d "$APP_PATH/.git" ]; then
            echo "Git repository found. Pulling latest changes..."
            cd $APP_PATH || { echo "Failed to navigate to directory"; exit 1; }
            git pull origin development || { echo "Git pull failed"; exit 1; }
          else
            echo "No Git repository found. Cloning repository..."
            if [ -d "$APP_PATH" ]; then
              echo "Removing existing directory..."
              rm -rf $APP_PATH
            fi
            mkdir -p $APP_PATH
            git clone $REPO_URL $APP_PATH || { echo "Git clone failed"; exit 1; }
          fi

          echo "Navigating to application directory..."
          cd $APP_PATH || { echo "Directory not found"; exit 1; }

          echo "Installing dependencies..."
          npm install || { echo "NPM install failed"; exit 1; }

          echo "Deployment to development completed successfully!"
        EOF

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # Deploy only on main branch

    steps:
    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Debug Environment Variables
      run: |
        echo "SERVER_IP: ${{ secrets.SERVER_IP }}"
        echo "SSH_USERNAME: ${{ secrets.SSH_USERNAME }}"
        echo "APP_PATH_PROD: ${{ secrets.APP_PATH_PROD }}"

    - name: Deploy to Production Server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        APP_PATH: ${{ secrets.APP_PATH_PROD }}
        REPO_URL: ${{ secrets.REPO_URL }}
      run: |
        sshpass -p $SSH_PASSWORD ssh -tt -o StrictHostKeyChecking=no $SSH_USERNAME@$SERVER_IP <<EOF
          echo "Checking if $APP_PATH is a Git repository..."
          
          if [ -d "$APP_PATH/.git" ]; then
            echo "Git repository found. Pulling latest changes..."
            cd $APP_PATH || { echo "Failed to navigate to directory"; exit 1; }
            git pull origin main || { echo "Git pull failed"; exit 1; }
          else
            echo "No Git repository found. Cloning repository..."
            if [ -d "$APP_PATH" ]; then
              echo "Removing existing directory..."
              rm -rf $APP_PATH
            fi
            mkdir -p $APP_PATH
            git clone $REPO_URL $APP_PATH || { echo "Git clone failed"; exit 1; }
          fi

          echo "Navigating to application directory..."
          cd $APP_PATH || { echo "Directory not found"; exit 1; }

          echo "Installing dependencies..."
          npm install || { echo "NPM install failed"; exit 1; }

          echo "Deployment to production completed successfully!"
        EOF
