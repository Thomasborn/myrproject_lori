
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model karyawan
 * 
 */
export type karyawan = $Result.DefaultSelection<Prisma.$karyawanPayload>
/**
 * Model role
 * 
 */
export type role = $Result.DefaultSelection<Prisma.$rolePayload>
/**
 * Model akses
 * 
 */
export type akses = $Result.DefaultSelection<Prisma.$aksesPayload>
/**
 * Model fungsi
 * 
 */
export type fungsi = $Result.DefaultSelection<Prisma.$fungsiPayload>
/**
 * Model hak_akses
 * 
 */
export type hak_akses = $Result.DefaultSelection<Prisma.$hak_aksesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.karyawan`: Exposes CRUD operations for the **karyawan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Karyawans
    * const karyawans = await prisma.karyawan.findMany()
    * ```
    */
  get karyawan(): Prisma.karyawanDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<ExtArgs>;

  /**
   * `prisma.akses`: Exposes CRUD operations for the **akses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Akses
    * const akses = await prisma.akses.findMany()
    * ```
    */
  get akses(): Prisma.aksesDelegate<ExtArgs>;

  /**
   * `prisma.fungsi`: Exposes CRUD operations for the **fungsi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fungsis
    * const fungsis = await prisma.fungsi.findMany()
    * ```
    */
  get fungsi(): Prisma.fungsiDelegate<ExtArgs>;

  /**
   * `prisma.hak_akses`: Exposes CRUD operations for the **hak_akses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hak_akses
    * const hak_akses = await prisma.hak_akses.findMany()
    * ```
    */
  get hak_akses(): Prisma.hak_aksesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    karyawan: 'karyawan',
    role: 'role',
    akses: 'akses',
    fungsi: 'fungsi',
    hak_akses: 'hak_akses'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'karyawan' | 'role' | 'akses' | 'fungsi' | 'hak_akses'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      karyawan: {
        payload: Prisma.$karyawanPayload<ExtArgs>
        fields: Prisma.karyawanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.karyawanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.karyawanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>
          }
          findFirst: {
            args: Prisma.karyawanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.karyawanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>
          }
          findMany: {
            args: Prisma.karyawanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>[]
          }
          create: {
            args: Prisma.karyawanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>
          }
          createMany: {
            args: Prisma.karyawanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.karyawanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>
          }
          update: {
            args: Prisma.karyawanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>
          }
          deleteMany: {
            args: Prisma.karyawanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.karyawanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.karyawanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$karyawanPayload>
          }
          aggregate: {
            args: Prisma.KaryawanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKaryawan>
          }
          groupBy: {
            args: Prisma.karyawanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KaryawanGroupByOutputType>[]
          }
          count: {
            args: Prisma.karyawanCountArgs<ExtArgs>,
            result: $Utils.Optional<KaryawanCountAggregateOutputType> | number
          }
        }
      }
      role: {
        payload: Prisma.$rolePayload<ExtArgs>
        fields: Prisma.roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findFirst: {
            args: Prisma.roleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findMany: {
            args: Prisma.roleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          create: {
            args: Prisma.roleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          createMany: {
            args: Prisma.roleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.roleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          update: {
            args: Prisma.roleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          deleteMany: {
            args: Prisma.roleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.roleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.roleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.roleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.roleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      akses: {
        payload: Prisma.$aksesPayload<ExtArgs>
        fields: Prisma.aksesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.aksesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.aksesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>
          }
          findFirst: {
            args: Prisma.aksesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.aksesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>
          }
          findMany: {
            args: Prisma.aksesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>[]
          }
          create: {
            args: Prisma.aksesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>
          }
          createMany: {
            args: Prisma.aksesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.aksesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>
          }
          update: {
            args: Prisma.aksesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>
          }
          deleteMany: {
            args: Prisma.aksesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.aksesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.aksesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$aksesPayload>
          }
          aggregate: {
            args: Prisma.AksesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAkses>
          }
          groupBy: {
            args: Prisma.aksesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AksesGroupByOutputType>[]
          }
          count: {
            args: Prisma.aksesCountArgs<ExtArgs>,
            result: $Utils.Optional<AksesCountAggregateOutputType> | number
          }
        }
      }
      fungsi: {
        payload: Prisma.$fungsiPayload<ExtArgs>
        fields: Prisma.fungsiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fungsiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fungsiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>
          }
          findFirst: {
            args: Prisma.fungsiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fungsiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>
          }
          findMany: {
            args: Prisma.fungsiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>[]
          }
          create: {
            args: Prisma.fungsiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>
          }
          createMany: {
            args: Prisma.fungsiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.fungsiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>
          }
          update: {
            args: Prisma.fungsiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>
          }
          deleteMany: {
            args: Prisma.fungsiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.fungsiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.fungsiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$fungsiPayload>
          }
          aggregate: {
            args: Prisma.FungsiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFungsi>
          }
          groupBy: {
            args: Prisma.fungsiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FungsiGroupByOutputType>[]
          }
          count: {
            args: Prisma.fungsiCountArgs<ExtArgs>,
            result: $Utils.Optional<FungsiCountAggregateOutputType> | number
          }
        }
      }
      hak_akses: {
        payload: Prisma.$hak_aksesPayload<ExtArgs>
        fields: Prisma.hak_aksesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.hak_aksesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.hak_aksesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>
          }
          findFirst: {
            args: Prisma.hak_aksesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.hak_aksesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>
          }
          findMany: {
            args: Prisma.hak_aksesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>[]
          }
          create: {
            args: Prisma.hak_aksesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>
          }
          createMany: {
            args: Prisma.hak_aksesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.hak_aksesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>
          }
          update: {
            args: Prisma.hak_aksesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>
          }
          deleteMany: {
            args: Prisma.hak_aksesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.hak_aksesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.hak_aksesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$hak_aksesPayload>
          }
          aggregate: {
            args: Prisma.Hak_aksesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHak_akses>
          }
          groupBy: {
            args: Prisma.hak_aksesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Hak_aksesGroupByOutputType>[]
          }
          count: {
            args: Prisma.hak_aksesCountArgs<ExtArgs>,
            result: $Utils.Optional<Hak_aksesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type KaryawanCountOutputType
   */

  export type KaryawanCountOutputType = {
    users: number
  }

  export type KaryawanCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | KaryawanCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * KaryawanCountOutputType without action
   */
  export type KaryawanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaryawanCountOutputType
     */
    select?: KaryawanCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KaryawanCountOutputType without action
   */
  export type KaryawanCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }



  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    karyawans: number
    hak_akses: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    karyawans?: boolean | RoleCountOutputTypeCountKaryawansArgs
    hak_akses?: boolean | RoleCountOutputTypeCountHak_aksesArgs
  }

  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountKaryawansArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: karyawanWhereInput
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountHak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: hak_aksesWhereInput
  }



  /**
   * Count Type AksesCountOutputType
   */

  export type AksesCountOutputType = {
    hak_akses: number
  }

  export type AksesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    hak_akses?: boolean | AksesCountOutputTypeCountHak_aksesArgs
  }

  // Custom InputTypes

  /**
   * AksesCountOutputType without action
   */
  export type AksesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AksesCountOutputType
     */
    select?: AksesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AksesCountOutputType without action
   */
  export type AksesCountOutputTypeCountHak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: hak_aksesWhereInput
  }



  /**
   * Count Type FungsiCountOutputType
   */

  export type FungsiCountOutputType = {
    hak_akses: number
  }

  export type FungsiCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    hak_akses?: boolean | FungsiCountOutputTypeCountHak_aksesArgs
  }

  // Custom InputTypes

  /**
   * FungsiCountOutputType without action
   */
  export type FungsiCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FungsiCountOutputType
     */
    select?: FungsiCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FungsiCountOutputType without action
   */
  export type FungsiCountOutputTypeCountHak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: hak_aksesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    karyawan_id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    karyawan_id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    karyawan_id: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    karyawan_id: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    karyawan_id: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    karyawan_id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    karyawan_id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    karyawan_id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    karyawan_id?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    karyawan_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    karyawan_id: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    karyawan_id?: boolean
    karyawan?: boolean | karyawanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    karyawan_id?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    karyawan?: boolean | karyawanDefaultArgs<ExtArgs>
  }


  export type $userPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      karyawan: Prisma.$karyawanPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      email: string
      password: string
      karyawan_id: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    karyawan<T extends karyawanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, karyawanDefaultArgs<ExtArgs>>): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly karyawan_id: FieldRef<"user", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model karyawan
   */

  export type AggregateKaryawan = {
    _count: KaryawanCountAggregateOutputType | null
    _avg: KaryawanAvgAggregateOutputType | null
    _sum: KaryawanSumAggregateOutputType | null
    _min: KaryawanMinAggregateOutputType | null
    _max: KaryawanMaxAggregateOutputType | null
  }

  export type KaryawanAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type KaryawanSumAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type KaryawanMinAggregateOutputType = {
    id: number | null
    nama: string | null
    nik: string | null
    alamat: string | null
    kontak: string | null
    tanggal_lahir: Date | null
    jenis_kelamin: string | null
    role_id: number | null
    no_rekening: string | null
  }

  export type KaryawanMaxAggregateOutputType = {
    id: number | null
    nama: string | null
    nik: string | null
    alamat: string | null
    kontak: string | null
    tanggal_lahir: Date | null
    jenis_kelamin: string | null
    role_id: number | null
    no_rekening: string | null
  }

  export type KaryawanCountAggregateOutputType = {
    id: number
    nama: number
    nik: number
    alamat: number
    kontak: number
    tanggal_lahir: number
    jenis_kelamin: number
    role_id: number
    no_rekening: number
    _all: number
  }


  export type KaryawanAvgAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type KaryawanSumAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type KaryawanMinAggregateInputType = {
    id?: true
    nama?: true
    nik?: true
    alamat?: true
    kontak?: true
    tanggal_lahir?: true
    jenis_kelamin?: true
    role_id?: true
    no_rekening?: true
  }

  export type KaryawanMaxAggregateInputType = {
    id?: true
    nama?: true
    nik?: true
    alamat?: true
    kontak?: true
    tanggal_lahir?: true
    jenis_kelamin?: true
    role_id?: true
    no_rekening?: true
  }

  export type KaryawanCountAggregateInputType = {
    id?: true
    nama?: true
    nik?: true
    alamat?: true
    kontak?: true
    tanggal_lahir?: true
    jenis_kelamin?: true
    role_id?: true
    no_rekening?: true
    _all?: true
  }

  export type KaryawanAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which karyawan to aggregate.
     */
    where?: karyawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of karyawans to fetch.
     */
    orderBy?: karyawanOrderByWithRelationInput | karyawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: karyawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` karyawans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned karyawans
    **/
    _count?: true | KaryawanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KaryawanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KaryawanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KaryawanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KaryawanMaxAggregateInputType
  }

  export type GetKaryawanAggregateType<T extends KaryawanAggregateArgs> = {
        [P in keyof T & keyof AggregateKaryawan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKaryawan[P]>
      : GetScalarType<T[P], AggregateKaryawan[P]>
  }




  export type karyawanGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: karyawanWhereInput
    orderBy?: karyawanOrderByWithAggregationInput | karyawanOrderByWithAggregationInput[]
    by: KaryawanScalarFieldEnum[] | KaryawanScalarFieldEnum
    having?: karyawanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KaryawanCountAggregateInputType | true
    _avg?: KaryawanAvgAggregateInputType
    _sum?: KaryawanSumAggregateInputType
    _min?: KaryawanMinAggregateInputType
    _max?: KaryawanMaxAggregateInputType
  }

  export type KaryawanGroupByOutputType = {
    id: number
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date
    jenis_kelamin: string
    role_id: number
    no_rekening: string
    _count: KaryawanCountAggregateOutputType | null
    _avg: KaryawanAvgAggregateOutputType | null
    _sum: KaryawanSumAggregateOutputType | null
    _min: KaryawanMinAggregateOutputType | null
    _max: KaryawanMaxAggregateOutputType | null
  }

  type GetKaryawanGroupByPayload<T extends karyawanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KaryawanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KaryawanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KaryawanGroupByOutputType[P]>
            : GetScalarType<T[P], KaryawanGroupByOutputType[P]>
        }
      >
    >


  export type karyawanSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    nik?: boolean
    alamat?: boolean
    kontak?: boolean
    tanggal_lahir?: boolean
    jenis_kelamin?: boolean
    role_id?: boolean
    no_rekening?: boolean
    users?: boolean | karyawan$usersArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
    _count?: boolean | KaryawanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["karyawan"]>

  export type karyawanSelectScalar = {
    id?: boolean
    nama?: boolean
    nik?: boolean
    alamat?: boolean
    kontak?: boolean
    tanggal_lahir?: boolean
    jenis_kelamin?: boolean
    role_id?: boolean
    no_rekening?: boolean
  }

  export type karyawanInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | karyawan$usersArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
    _count?: boolean | KaryawanCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $karyawanPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "karyawan"
    objects: {
      users: Prisma.$userPayload<ExtArgs>[]
      role: Prisma.$rolePayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      nama: string
      nik: string
      alamat: string
      kontak: string
      tanggal_lahir: Date
      jenis_kelamin: string
      role_id: number
      no_rekening: string
    }, ExtArgs["result"]["karyawan"]>
    composites: {}
  }


  type karyawanGetPayload<S extends boolean | null | undefined | karyawanDefaultArgs> = $Result.GetResult<Prisma.$karyawanPayload, S>

  type karyawanCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<karyawanFindManyArgs, 'select' | 'include'> & {
      select?: KaryawanCountAggregateInputType | true
    }

  export interface karyawanDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['karyawan'], meta: { name: 'karyawan' } }
    /**
     * Find zero or one Karyawan that matches the filter.
     * @param {karyawanFindUniqueArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends karyawanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, karyawanFindUniqueArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Karyawan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {karyawanFindUniqueOrThrowArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends karyawanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, karyawanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Karyawan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {karyawanFindFirstArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends karyawanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, karyawanFindFirstArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Karyawan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {karyawanFindFirstOrThrowArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends karyawanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, karyawanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Karyawans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {karyawanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Karyawans
     * const karyawans = await prisma.karyawan.findMany()
     * 
     * // Get first 10 Karyawans
     * const karyawans = await prisma.karyawan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const karyawanWithIdOnly = await prisma.karyawan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends karyawanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, karyawanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Karyawan.
     * @param {karyawanCreateArgs} args - Arguments to create a Karyawan.
     * @example
     * // Create one Karyawan
     * const Karyawan = await prisma.karyawan.create({
     *   data: {
     *     // ... data to create a Karyawan
     *   }
     * })
     * 
    **/
    create<T extends karyawanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, karyawanCreateArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Karyawans.
     *     @param {karyawanCreateManyArgs} args - Arguments to create many Karyawans.
     *     @example
     *     // Create many Karyawans
     *     const karyawan = await prisma.karyawan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends karyawanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, karyawanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Karyawan.
     * @param {karyawanDeleteArgs} args - Arguments to delete one Karyawan.
     * @example
     * // Delete one Karyawan
     * const Karyawan = await prisma.karyawan.delete({
     *   where: {
     *     // ... filter to delete one Karyawan
     *   }
     * })
     * 
    **/
    delete<T extends karyawanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, karyawanDeleteArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Karyawan.
     * @param {karyawanUpdateArgs} args - Arguments to update one Karyawan.
     * @example
     * // Update one Karyawan
     * const karyawan = await prisma.karyawan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends karyawanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, karyawanUpdateArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Karyawans.
     * @param {karyawanDeleteManyArgs} args - Arguments to filter Karyawans to delete.
     * @example
     * // Delete a few Karyawans
     * const { count } = await prisma.karyawan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends karyawanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, karyawanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Karyawans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {karyawanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Karyawans
     * const karyawan = await prisma.karyawan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends karyawanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, karyawanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Karyawan.
     * @param {karyawanUpsertArgs} args - Arguments to update or create a Karyawan.
     * @example
     * // Update or create a Karyawan
     * const karyawan = await prisma.karyawan.upsert({
     *   create: {
     *     // ... data to create a Karyawan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Karyawan we want to update
     *   }
     * })
    **/
    upsert<T extends karyawanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, karyawanUpsertArgs<ExtArgs>>
    ): Prisma__karyawanClient<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Karyawans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {karyawanCountArgs} args - Arguments to filter Karyawans to count.
     * @example
     * // Count the number of Karyawans
     * const count = await prisma.karyawan.count({
     *   where: {
     *     // ... the filter for the Karyawans we want to count
     *   }
     * })
    **/
    count<T extends karyawanCountArgs>(
      args?: Subset<T, karyawanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KaryawanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Karyawan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KaryawanAggregateArgs>(args: Subset<T, KaryawanAggregateArgs>): Prisma.PrismaPromise<GetKaryawanAggregateType<T>>

    /**
     * Group by Karyawan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {karyawanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends karyawanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: karyawanGroupByArgs['orderBy'] }
        : { orderBy?: karyawanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, karyawanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKaryawanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the karyawan model
   */
  readonly fields: karyawanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for karyawan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__karyawanClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends karyawan$usersArgs<ExtArgs> = {}>(args?: Subset<T, karyawan$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'> | Null>;

    role<T extends roleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, roleDefaultArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the karyawan model
   */ 
  interface karyawanFieldRefs {
    readonly id: FieldRef<"karyawan", 'Int'>
    readonly nama: FieldRef<"karyawan", 'String'>
    readonly nik: FieldRef<"karyawan", 'String'>
    readonly alamat: FieldRef<"karyawan", 'String'>
    readonly kontak: FieldRef<"karyawan", 'String'>
    readonly tanggal_lahir: FieldRef<"karyawan", 'DateTime'>
    readonly jenis_kelamin: FieldRef<"karyawan", 'String'>
    readonly role_id: FieldRef<"karyawan", 'Int'>
    readonly no_rekening: FieldRef<"karyawan", 'String'>
  }
    

  // Custom InputTypes

  /**
   * karyawan findUnique
   */
  export type karyawanFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * Filter, which karyawan to fetch.
     */
    where: karyawanWhereUniqueInput
  }


  /**
   * karyawan findUniqueOrThrow
   */
  export type karyawanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * Filter, which karyawan to fetch.
     */
    where: karyawanWhereUniqueInput
  }


  /**
   * karyawan findFirst
   */
  export type karyawanFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * Filter, which karyawan to fetch.
     */
    where?: karyawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of karyawans to fetch.
     */
    orderBy?: karyawanOrderByWithRelationInput | karyawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for karyawans.
     */
    cursor?: karyawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` karyawans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of karyawans.
     */
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * karyawan findFirstOrThrow
   */
  export type karyawanFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * Filter, which karyawan to fetch.
     */
    where?: karyawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of karyawans to fetch.
     */
    orderBy?: karyawanOrderByWithRelationInput | karyawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for karyawans.
     */
    cursor?: karyawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` karyawans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of karyawans.
     */
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * karyawan findMany
   */
  export type karyawanFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * Filter, which karyawans to fetch.
     */
    where?: karyawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of karyawans to fetch.
     */
    orderBy?: karyawanOrderByWithRelationInput | karyawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing karyawans.
     */
    cursor?: karyawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` karyawans.
     */
    skip?: number
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * karyawan create
   */
  export type karyawanCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * The data needed to create a karyawan.
     */
    data: XOR<karyawanCreateInput, karyawanUncheckedCreateInput>
  }


  /**
   * karyawan createMany
   */
  export type karyawanCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many karyawans.
     */
    data: karyawanCreateManyInput | karyawanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * karyawan update
   */
  export type karyawanUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * The data needed to update a karyawan.
     */
    data: XOR<karyawanUpdateInput, karyawanUncheckedUpdateInput>
    /**
     * Choose, which karyawan to update.
     */
    where: karyawanWhereUniqueInput
  }


  /**
   * karyawan updateMany
   */
  export type karyawanUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update karyawans.
     */
    data: XOR<karyawanUpdateManyMutationInput, karyawanUncheckedUpdateManyInput>
    /**
     * Filter which karyawans to update
     */
    where?: karyawanWhereInput
  }


  /**
   * karyawan upsert
   */
  export type karyawanUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * The filter to search for the karyawan to update in case it exists.
     */
    where: karyawanWhereUniqueInput
    /**
     * In case the karyawan found by the `where` argument doesn't exist, create a new karyawan with this data.
     */
    create: XOR<karyawanCreateInput, karyawanUncheckedCreateInput>
    /**
     * In case the karyawan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<karyawanUpdateInput, karyawanUncheckedUpdateInput>
  }


  /**
   * karyawan delete
   */
  export type karyawanDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    /**
     * Filter which karyawan to delete.
     */
    where: karyawanWhereUniqueInput
  }


  /**
   * karyawan deleteMany
   */
  export type karyawanDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which karyawans to delete
     */
    where?: karyawanWhereInput
  }


  /**
   * karyawan.users
   */
  export type karyawan$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * karyawan without action
   */
  export type karyawanDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
  }



  /**
   * Model role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    nama: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    nama: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    nama: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    nama?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    nama?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    nama?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which role to aggregate.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type roleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: roleWhereInput
    orderBy?: roleOrderByWithAggregationInput | roleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    nama: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    karyawans?: boolean | role$karyawansArgs<ExtArgs>
    hak_akses?: boolean | role$hak_aksesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type roleSelectScalar = {
    id?: boolean
    nama?: boolean
  }

  export type roleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    karyawans?: boolean | role$karyawansArgs<ExtArgs>
    hak_akses?: boolean | role$hak_aksesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $rolePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "role"
    objects: {
      karyawans: Prisma.$karyawanPayload<ExtArgs>[]
      hak_akses: Prisma.$hak_aksesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nama: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = $Result.GetResult<Prisma.$rolePayload, S>

  type roleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<roleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface roleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends roleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, roleFindUniqueArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends roleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindFirstArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends roleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends roleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends roleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, roleCreateArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {roleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends roleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends roleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, roleDeleteArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends roleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpdateArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends roleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends roleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends roleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpsertArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roleGroupByArgs['orderBy'] }
        : { orderBy?: roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the role model
   */
  readonly fields: roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    karyawans<T extends role$karyawansArgs<ExtArgs> = {}>(args?: Subset<T, role$karyawansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$karyawanPayload<ExtArgs>, T, 'findMany'> | Null>;

    hak_akses<T extends role$hak_aksesArgs<ExtArgs> = {}>(args?: Subset<T, role$hak_aksesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the role model
   */ 
  interface roleFieldRefs {
    readonly id: FieldRef<"role", 'Int'>
    readonly nama: FieldRef<"role", 'String'>
  }
    

  // Custom InputTypes

  /**
   * role findUnique
   */
  export type roleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role findUniqueOrThrow
   */
  export type roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role findFirst
   */
  export type roleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * role findFirstOrThrow
   */
  export type roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * role findMany
   */
  export type roleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * role create
   */
  export type roleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to create a role.
     */
    data: XOR<roleCreateInput, roleUncheckedCreateInput>
  }


  /**
   * role createMany
   */
  export type roleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * role update
   */
  export type roleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to update a role.
     */
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role updateMany
   */
  export type roleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
  }


  /**
   * role upsert
   */
  export type roleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The filter to search for the role to update in case it exists.
     */
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     */
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }


  /**
   * role delete
   */
  export type roleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter which role to delete.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: roleWhereInput
  }


  /**
   * role.karyawans
   */
  export type role$karyawansArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the karyawan
     */
    select?: karyawanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: karyawanInclude<ExtArgs> | null
    where?: karyawanWhereInput
    orderBy?: karyawanOrderByWithRelationInput | karyawanOrderByWithRelationInput[]
    cursor?: karyawanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * role.hak_akses
   */
  export type role$hak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    where?: hak_aksesWhereInput
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    cursor?: hak_aksesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Hak_aksesScalarFieldEnum | Hak_aksesScalarFieldEnum[]
  }


  /**
   * role without action
   */
  export type roleDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
  }



  /**
   * Model akses
   */

  export type AggregateAkses = {
    _count: AksesCountAggregateOutputType | null
    _avg: AksesAvgAggregateOutputType | null
    _sum: AksesSumAggregateOutputType | null
    _min: AksesMinAggregateOutputType | null
    _max: AksesMaxAggregateOutputType | null
  }

  export type AksesAvgAggregateOutputType = {
    id: number | null
  }

  export type AksesSumAggregateOutputType = {
    id: number | null
  }

  export type AksesMinAggregateOutputType = {
    id: number | null
    nama: string | null
  }

  export type AksesMaxAggregateOutputType = {
    id: number | null
    nama: string | null
  }

  export type AksesCountAggregateOutputType = {
    id: number
    nama: number
    _all: number
  }


  export type AksesAvgAggregateInputType = {
    id?: true
  }

  export type AksesSumAggregateInputType = {
    id?: true
  }

  export type AksesMinAggregateInputType = {
    id?: true
    nama?: true
  }

  export type AksesMaxAggregateInputType = {
    id?: true
    nama?: true
  }

  export type AksesCountAggregateInputType = {
    id?: true
    nama?: true
    _all?: true
  }

  export type AksesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which akses to aggregate.
     */
    where?: aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of akses to fetch.
     */
    orderBy?: aksesOrderByWithRelationInput | aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` akses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned akses
    **/
    _count?: true | AksesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AksesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AksesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AksesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AksesMaxAggregateInputType
  }

  export type GetAksesAggregateType<T extends AksesAggregateArgs> = {
        [P in keyof T & keyof AggregateAkses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAkses[P]>
      : GetScalarType<T[P], AggregateAkses[P]>
  }




  export type aksesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: aksesWhereInput
    orderBy?: aksesOrderByWithAggregationInput | aksesOrderByWithAggregationInput[]
    by: AksesScalarFieldEnum[] | AksesScalarFieldEnum
    having?: aksesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AksesCountAggregateInputType | true
    _avg?: AksesAvgAggregateInputType
    _sum?: AksesSumAggregateInputType
    _min?: AksesMinAggregateInputType
    _max?: AksesMaxAggregateInputType
  }

  export type AksesGroupByOutputType = {
    id: number
    nama: string
    _count: AksesCountAggregateOutputType | null
    _avg: AksesAvgAggregateOutputType | null
    _sum: AksesSumAggregateOutputType | null
    _min: AksesMinAggregateOutputType | null
    _max: AksesMaxAggregateOutputType | null
  }

  type GetAksesGroupByPayload<T extends aksesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AksesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AksesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AksesGroupByOutputType[P]>
            : GetScalarType<T[P], AksesGroupByOutputType[P]>
        }
      >
    >


  export type aksesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    hak_akses?: boolean | akses$hak_aksesArgs<ExtArgs>
    _count?: boolean | AksesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["akses"]>

  export type aksesSelectScalar = {
    id?: boolean
    nama?: boolean
  }

  export type aksesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    hak_akses?: boolean | akses$hak_aksesArgs<ExtArgs>
    _count?: boolean | AksesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $aksesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "akses"
    objects: {
      hak_akses: Prisma.$hak_aksesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nama: string
    }, ExtArgs["result"]["akses"]>
    composites: {}
  }


  type aksesGetPayload<S extends boolean | null | undefined | aksesDefaultArgs> = $Result.GetResult<Prisma.$aksesPayload, S>

  type aksesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<aksesFindManyArgs, 'select' | 'include'> & {
      select?: AksesCountAggregateInputType | true
    }

  export interface aksesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['akses'], meta: { name: 'akses' } }
    /**
     * Find zero or one Akses that matches the filter.
     * @param {aksesFindUniqueArgs} args - Arguments to find a Akses
     * @example
     * // Get one Akses
     * const akses = await prisma.akses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends aksesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, aksesFindUniqueArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Akses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {aksesFindUniqueOrThrowArgs} args - Arguments to find a Akses
     * @example
     * // Get one Akses
     * const akses = await prisma.akses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends aksesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, aksesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Akses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aksesFindFirstArgs} args - Arguments to find a Akses
     * @example
     * // Get one Akses
     * const akses = await prisma.akses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends aksesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, aksesFindFirstArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Akses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aksesFindFirstOrThrowArgs} args - Arguments to find a Akses
     * @example
     * // Get one Akses
     * const akses = await prisma.akses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends aksesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, aksesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Akses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aksesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Akses
     * const akses = await prisma.akses.findMany()
     * 
     * // Get first 10 Akses
     * const akses = await prisma.akses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aksesWithIdOnly = await prisma.akses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends aksesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, aksesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Akses.
     * @param {aksesCreateArgs} args - Arguments to create a Akses.
     * @example
     * // Create one Akses
     * const Akses = await prisma.akses.create({
     *   data: {
     *     // ... data to create a Akses
     *   }
     * })
     * 
    **/
    create<T extends aksesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, aksesCreateArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Akses.
     *     @param {aksesCreateManyArgs} args - Arguments to create many Akses.
     *     @example
     *     // Create many Akses
     *     const akses = await prisma.akses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends aksesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, aksesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Akses.
     * @param {aksesDeleteArgs} args - Arguments to delete one Akses.
     * @example
     * // Delete one Akses
     * const Akses = await prisma.akses.delete({
     *   where: {
     *     // ... filter to delete one Akses
     *   }
     * })
     * 
    **/
    delete<T extends aksesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, aksesDeleteArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Akses.
     * @param {aksesUpdateArgs} args - Arguments to update one Akses.
     * @example
     * // Update one Akses
     * const akses = await prisma.akses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends aksesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, aksesUpdateArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Akses.
     * @param {aksesDeleteManyArgs} args - Arguments to filter Akses to delete.
     * @example
     * // Delete a few Akses
     * const { count } = await prisma.akses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends aksesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, aksesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aksesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Akses
     * const akses = await prisma.akses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends aksesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, aksesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Akses.
     * @param {aksesUpsertArgs} args - Arguments to update or create a Akses.
     * @example
     * // Update or create a Akses
     * const akses = await prisma.akses.upsert({
     *   create: {
     *     // ... data to create a Akses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Akses we want to update
     *   }
     * })
    **/
    upsert<T extends aksesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, aksesUpsertArgs<ExtArgs>>
    ): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aksesCountArgs} args - Arguments to filter Akses to count.
     * @example
     * // Count the number of Akses
     * const count = await prisma.akses.count({
     *   where: {
     *     // ... the filter for the Akses we want to count
     *   }
     * })
    **/
    count<T extends aksesCountArgs>(
      args?: Subset<T, aksesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AksesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AksesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AksesAggregateArgs>(args: Subset<T, AksesAggregateArgs>): Prisma.PrismaPromise<GetAksesAggregateType<T>>

    /**
     * Group by Akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aksesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends aksesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: aksesGroupByArgs['orderBy'] }
        : { orderBy?: aksesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, aksesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAksesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the akses model
   */
  readonly fields: aksesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for akses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__aksesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hak_akses<T extends akses$hak_aksesArgs<ExtArgs> = {}>(args?: Subset<T, akses$hak_aksesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the akses model
   */ 
  interface aksesFieldRefs {
    readonly id: FieldRef<"akses", 'Int'>
    readonly nama: FieldRef<"akses", 'String'>
  }
    

  // Custom InputTypes

  /**
   * akses findUnique
   */
  export type aksesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * Filter, which akses to fetch.
     */
    where: aksesWhereUniqueInput
  }


  /**
   * akses findUniqueOrThrow
   */
  export type aksesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * Filter, which akses to fetch.
     */
    where: aksesWhereUniqueInput
  }


  /**
   * akses findFirst
   */
  export type aksesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * Filter, which akses to fetch.
     */
    where?: aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of akses to fetch.
     */
    orderBy?: aksesOrderByWithRelationInput | aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for akses.
     */
    cursor?: aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` akses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of akses.
     */
    distinct?: AksesScalarFieldEnum | AksesScalarFieldEnum[]
  }


  /**
   * akses findFirstOrThrow
   */
  export type aksesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * Filter, which akses to fetch.
     */
    where?: aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of akses to fetch.
     */
    orderBy?: aksesOrderByWithRelationInput | aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for akses.
     */
    cursor?: aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` akses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of akses.
     */
    distinct?: AksesScalarFieldEnum | AksesScalarFieldEnum[]
  }


  /**
   * akses findMany
   */
  export type aksesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * Filter, which akses to fetch.
     */
    where?: aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of akses to fetch.
     */
    orderBy?: aksesOrderByWithRelationInput | aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing akses.
     */
    cursor?: aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` akses.
     */
    skip?: number
    distinct?: AksesScalarFieldEnum | AksesScalarFieldEnum[]
  }


  /**
   * akses create
   */
  export type aksesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * The data needed to create a akses.
     */
    data: XOR<aksesCreateInput, aksesUncheckedCreateInput>
  }


  /**
   * akses createMany
   */
  export type aksesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many akses.
     */
    data: aksesCreateManyInput | aksesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * akses update
   */
  export type aksesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * The data needed to update a akses.
     */
    data: XOR<aksesUpdateInput, aksesUncheckedUpdateInput>
    /**
     * Choose, which akses to update.
     */
    where: aksesWhereUniqueInput
  }


  /**
   * akses updateMany
   */
  export type aksesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update akses.
     */
    data: XOR<aksesUpdateManyMutationInput, aksesUncheckedUpdateManyInput>
    /**
     * Filter which akses to update
     */
    where?: aksesWhereInput
  }


  /**
   * akses upsert
   */
  export type aksesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * The filter to search for the akses to update in case it exists.
     */
    where: aksesWhereUniqueInput
    /**
     * In case the akses found by the `where` argument doesn't exist, create a new akses with this data.
     */
    create: XOR<aksesCreateInput, aksesUncheckedCreateInput>
    /**
     * In case the akses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<aksesUpdateInput, aksesUncheckedUpdateInput>
  }


  /**
   * akses delete
   */
  export type aksesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
    /**
     * Filter which akses to delete.
     */
    where: aksesWhereUniqueInput
  }


  /**
   * akses deleteMany
   */
  export type aksesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which akses to delete
     */
    where?: aksesWhereInput
  }


  /**
   * akses.hak_akses
   */
  export type akses$hak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    where?: hak_aksesWhereInput
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    cursor?: hak_aksesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Hak_aksesScalarFieldEnum | Hak_aksesScalarFieldEnum[]
  }


  /**
   * akses without action
   */
  export type aksesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the akses
     */
    select?: aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: aksesInclude<ExtArgs> | null
  }



  /**
   * Model fungsi
   */

  export type AggregateFungsi = {
    _count: FungsiCountAggregateOutputType | null
    _avg: FungsiAvgAggregateOutputType | null
    _sum: FungsiSumAggregateOutputType | null
    _min: FungsiMinAggregateOutputType | null
    _max: FungsiMaxAggregateOutputType | null
  }

  export type FungsiAvgAggregateOutputType = {
    id: number | null
  }

  export type FungsiSumAggregateOutputType = {
    id: number | null
  }

  export type FungsiMinAggregateOutputType = {
    id: number | null
    nama: string | null
  }

  export type FungsiMaxAggregateOutputType = {
    id: number | null
    nama: string | null
  }

  export type FungsiCountAggregateOutputType = {
    id: number
    nama: number
    _all: number
  }


  export type FungsiAvgAggregateInputType = {
    id?: true
  }

  export type FungsiSumAggregateInputType = {
    id?: true
  }

  export type FungsiMinAggregateInputType = {
    id?: true
    nama?: true
  }

  export type FungsiMaxAggregateInputType = {
    id?: true
    nama?: true
  }

  export type FungsiCountAggregateInputType = {
    id?: true
    nama?: true
    _all?: true
  }

  export type FungsiAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which fungsi to aggregate.
     */
    where?: fungsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fungsis to fetch.
     */
    orderBy?: fungsiOrderByWithRelationInput | fungsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fungsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fungsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fungsis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fungsis
    **/
    _count?: true | FungsiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FungsiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FungsiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FungsiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FungsiMaxAggregateInputType
  }

  export type GetFungsiAggregateType<T extends FungsiAggregateArgs> = {
        [P in keyof T & keyof AggregateFungsi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFungsi[P]>
      : GetScalarType<T[P], AggregateFungsi[P]>
  }




  export type fungsiGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: fungsiWhereInput
    orderBy?: fungsiOrderByWithAggregationInput | fungsiOrderByWithAggregationInput[]
    by: FungsiScalarFieldEnum[] | FungsiScalarFieldEnum
    having?: fungsiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FungsiCountAggregateInputType | true
    _avg?: FungsiAvgAggregateInputType
    _sum?: FungsiSumAggregateInputType
    _min?: FungsiMinAggregateInputType
    _max?: FungsiMaxAggregateInputType
  }

  export type FungsiGroupByOutputType = {
    id: number
    nama: string
    _count: FungsiCountAggregateOutputType | null
    _avg: FungsiAvgAggregateOutputType | null
    _sum: FungsiSumAggregateOutputType | null
    _min: FungsiMinAggregateOutputType | null
    _max: FungsiMaxAggregateOutputType | null
  }

  type GetFungsiGroupByPayload<T extends fungsiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FungsiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FungsiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FungsiGroupByOutputType[P]>
            : GetScalarType<T[P], FungsiGroupByOutputType[P]>
        }
      >
    >


  export type fungsiSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    hak_akses?: boolean | fungsi$hak_aksesArgs<ExtArgs>
    _count?: boolean | FungsiCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fungsi"]>

  export type fungsiSelectScalar = {
    id?: boolean
    nama?: boolean
  }

  export type fungsiInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    hak_akses?: boolean | fungsi$hak_aksesArgs<ExtArgs>
    _count?: boolean | FungsiCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $fungsiPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "fungsi"
    objects: {
      hak_akses: Prisma.$hak_aksesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nama: string
    }, ExtArgs["result"]["fungsi"]>
    composites: {}
  }


  type fungsiGetPayload<S extends boolean | null | undefined | fungsiDefaultArgs> = $Result.GetResult<Prisma.$fungsiPayload, S>

  type fungsiCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<fungsiFindManyArgs, 'select' | 'include'> & {
      select?: FungsiCountAggregateInputType | true
    }

  export interface fungsiDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fungsi'], meta: { name: 'fungsi' } }
    /**
     * Find zero or one Fungsi that matches the filter.
     * @param {fungsiFindUniqueArgs} args - Arguments to find a Fungsi
     * @example
     * // Get one Fungsi
     * const fungsi = await prisma.fungsi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends fungsiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, fungsiFindUniqueArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fungsi that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {fungsiFindUniqueOrThrowArgs} args - Arguments to find a Fungsi
     * @example
     * // Get one Fungsi
     * const fungsi = await prisma.fungsi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends fungsiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fungsiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fungsi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fungsiFindFirstArgs} args - Arguments to find a Fungsi
     * @example
     * // Get one Fungsi
     * const fungsi = await prisma.fungsi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends fungsiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, fungsiFindFirstArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fungsi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fungsiFindFirstOrThrowArgs} args - Arguments to find a Fungsi
     * @example
     * // Get one Fungsi
     * const fungsi = await prisma.fungsi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends fungsiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, fungsiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fungsis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fungsiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fungsis
     * const fungsis = await prisma.fungsi.findMany()
     * 
     * // Get first 10 Fungsis
     * const fungsis = await prisma.fungsi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fungsiWithIdOnly = await prisma.fungsi.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends fungsiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fungsiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fungsi.
     * @param {fungsiCreateArgs} args - Arguments to create a Fungsi.
     * @example
     * // Create one Fungsi
     * const Fungsi = await prisma.fungsi.create({
     *   data: {
     *     // ... data to create a Fungsi
     *   }
     * })
     * 
    **/
    create<T extends fungsiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, fungsiCreateArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fungsis.
     *     @param {fungsiCreateManyArgs} args - Arguments to create many Fungsis.
     *     @example
     *     // Create many Fungsis
     *     const fungsi = await prisma.fungsi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends fungsiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fungsiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fungsi.
     * @param {fungsiDeleteArgs} args - Arguments to delete one Fungsi.
     * @example
     * // Delete one Fungsi
     * const Fungsi = await prisma.fungsi.delete({
     *   where: {
     *     // ... filter to delete one Fungsi
     *   }
     * })
     * 
    **/
    delete<T extends fungsiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, fungsiDeleteArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fungsi.
     * @param {fungsiUpdateArgs} args - Arguments to update one Fungsi.
     * @example
     * // Update one Fungsi
     * const fungsi = await prisma.fungsi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends fungsiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, fungsiUpdateArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fungsis.
     * @param {fungsiDeleteManyArgs} args - Arguments to filter Fungsis to delete.
     * @example
     * // Delete a few Fungsis
     * const { count } = await prisma.fungsi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends fungsiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, fungsiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fungsis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fungsiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fungsis
     * const fungsi = await prisma.fungsi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends fungsiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, fungsiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fungsi.
     * @param {fungsiUpsertArgs} args - Arguments to update or create a Fungsi.
     * @example
     * // Update or create a Fungsi
     * const fungsi = await prisma.fungsi.upsert({
     *   create: {
     *     // ... data to create a Fungsi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fungsi we want to update
     *   }
     * })
    **/
    upsert<T extends fungsiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, fungsiUpsertArgs<ExtArgs>>
    ): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fungsis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fungsiCountArgs} args - Arguments to filter Fungsis to count.
     * @example
     * // Count the number of Fungsis
     * const count = await prisma.fungsi.count({
     *   where: {
     *     // ... the filter for the Fungsis we want to count
     *   }
     * })
    **/
    count<T extends fungsiCountArgs>(
      args?: Subset<T, fungsiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FungsiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fungsi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FungsiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FungsiAggregateArgs>(args: Subset<T, FungsiAggregateArgs>): Prisma.PrismaPromise<GetFungsiAggregateType<T>>

    /**
     * Group by Fungsi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fungsiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fungsiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fungsiGroupByArgs['orderBy'] }
        : { orderBy?: fungsiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fungsiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFungsiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the fungsi model
   */
  readonly fields: fungsiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for fungsi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fungsiClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    hak_akses<T extends fungsi$hak_aksesArgs<ExtArgs> = {}>(args?: Subset<T, fungsi$hak_aksesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the fungsi model
   */ 
  interface fungsiFieldRefs {
    readonly id: FieldRef<"fungsi", 'Int'>
    readonly nama: FieldRef<"fungsi", 'String'>
  }
    

  // Custom InputTypes

  /**
   * fungsi findUnique
   */
  export type fungsiFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * Filter, which fungsi to fetch.
     */
    where: fungsiWhereUniqueInput
  }


  /**
   * fungsi findUniqueOrThrow
   */
  export type fungsiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * Filter, which fungsi to fetch.
     */
    where: fungsiWhereUniqueInput
  }


  /**
   * fungsi findFirst
   */
  export type fungsiFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * Filter, which fungsi to fetch.
     */
    where?: fungsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fungsis to fetch.
     */
    orderBy?: fungsiOrderByWithRelationInput | fungsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fungsis.
     */
    cursor?: fungsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fungsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fungsis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fungsis.
     */
    distinct?: FungsiScalarFieldEnum | FungsiScalarFieldEnum[]
  }


  /**
   * fungsi findFirstOrThrow
   */
  export type fungsiFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * Filter, which fungsi to fetch.
     */
    where?: fungsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fungsis to fetch.
     */
    orderBy?: fungsiOrderByWithRelationInput | fungsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fungsis.
     */
    cursor?: fungsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fungsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fungsis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fungsis.
     */
    distinct?: FungsiScalarFieldEnum | FungsiScalarFieldEnum[]
  }


  /**
   * fungsi findMany
   */
  export type fungsiFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * Filter, which fungsis to fetch.
     */
    where?: fungsiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fungsis to fetch.
     */
    orderBy?: fungsiOrderByWithRelationInput | fungsiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fungsis.
     */
    cursor?: fungsiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fungsis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fungsis.
     */
    skip?: number
    distinct?: FungsiScalarFieldEnum | FungsiScalarFieldEnum[]
  }


  /**
   * fungsi create
   */
  export type fungsiCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * The data needed to create a fungsi.
     */
    data: XOR<fungsiCreateInput, fungsiUncheckedCreateInput>
  }


  /**
   * fungsi createMany
   */
  export type fungsiCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fungsis.
     */
    data: fungsiCreateManyInput | fungsiCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * fungsi update
   */
  export type fungsiUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * The data needed to update a fungsi.
     */
    data: XOR<fungsiUpdateInput, fungsiUncheckedUpdateInput>
    /**
     * Choose, which fungsi to update.
     */
    where: fungsiWhereUniqueInput
  }


  /**
   * fungsi updateMany
   */
  export type fungsiUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fungsis.
     */
    data: XOR<fungsiUpdateManyMutationInput, fungsiUncheckedUpdateManyInput>
    /**
     * Filter which fungsis to update
     */
    where?: fungsiWhereInput
  }


  /**
   * fungsi upsert
   */
  export type fungsiUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * The filter to search for the fungsi to update in case it exists.
     */
    where: fungsiWhereUniqueInput
    /**
     * In case the fungsi found by the `where` argument doesn't exist, create a new fungsi with this data.
     */
    create: XOR<fungsiCreateInput, fungsiUncheckedCreateInput>
    /**
     * In case the fungsi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fungsiUpdateInput, fungsiUncheckedUpdateInput>
  }


  /**
   * fungsi delete
   */
  export type fungsiDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
    /**
     * Filter which fungsi to delete.
     */
    where: fungsiWhereUniqueInput
  }


  /**
   * fungsi deleteMany
   */
  export type fungsiDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which fungsis to delete
     */
    where?: fungsiWhereInput
  }


  /**
   * fungsi.hak_akses
   */
  export type fungsi$hak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    where?: hak_aksesWhereInput
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    cursor?: hak_aksesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Hak_aksesScalarFieldEnum | Hak_aksesScalarFieldEnum[]
  }


  /**
   * fungsi without action
   */
  export type fungsiDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fungsi
     */
    select?: fungsiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: fungsiInclude<ExtArgs> | null
  }



  /**
   * Model hak_akses
   */

  export type AggregateHak_akses = {
    _count: Hak_aksesCountAggregateOutputType | null
    _avg: Hak_aksesAvgAggregateOutputType | null
    _sum: Hak_aksesSumAggregateOutputType | null
    _min: Hak_aksesMinAggregateOutputType | null
    _max: Hak_aksesMaxAggregateOutputType | null
  }

  export type Hak_aksesAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
    fungsi_id: number | null
    akses_id: number | null
  }

  export type Hak_aksesSumAggregateOutputType = {
    id: number | null
    role_id: number | null
    fungsi_id: number | null
    akses_id: number | null
  }

  export type Hak_aksesMinAggregateOutputType = {
    id: number | null
    role_id: number | null
    fungsi_id: number | null
    akses_id: number | null
  }

  export type Hak_aksesMaxAggregateOutputType = {
    id: number | null
    role_id: number | null
    fungsi_id: number | null
    akses_id: number | null
  }

  export type Hak_aksesCountAggregateOutputType = {
    id: number
    role_id: number
    fungsi_id: number
    akses_id: number
    _all: number
  }


  export type Hak_aksesAvgAggregateInputType = {
    id?: true
    role_id?: true
    fungsi_id?: true
    akses_id?: true
  }

  export type Hak_aksesSumAggregateInputType = {
    id?: true
    role_id?: true
    fungsi_id?: true
    akses_id?: true
  }

  export type Hak_aksesMinAggregateInputType = {
    id?: true
    role_id?: true
    fungsi_id?: true
    akses_id?: true
  }

  export type Hak_aksesMaxAggregateInputType = {
    id?: true
    role_id?: true
    fungsi_id?: true
    akses_id?: true
  }

  export type Hak_aksesCountAggregateInputType = {
    id?: true
    role_id?: true
    fungsi_id?: true
    akses_id?: true
    _all?: true
  }

  export type Hak_aksesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which hak_akses to aggregate.
     */
    where?: hak_aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hak_akses to fetch.
     */
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hak_aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hak_akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hak_akses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hak_akses
    **/
    _count?: true | Hak_aksesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Hak_aksesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Hak_aksesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Hak_aksesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Hak_aksesMaxAggregateInputType
  }

  export type GetHak_aksesAggregateType<T extends Hak_aksesAggregateArgs> = {
        [P in keyof T & keyof AggregateHak_akses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHak_akses[P]>
      : GetScalarType<T[P], AggregateHak_akses[P]>
  }




  export type hak_aksesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: hak_aksesWhereInput
    orderBy?: hak_aksesOrderByWithAggregationInput | hak_aksesOrderByWithAggregationInput[]
    by: Hak_aksesScalarFieldEnum[] | Hak_aksesScalarFieldEnum
    having?: hak_aksesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Hak_aksesCountAggregateInputType | true
    _avg?: Hak_aksesAvgAggregateInputType
    _sum?: Hak_aksesSumAggregateInputType
    _min?: Hak_aksesMinAggregateInputType
    _max?: Hak_aksesMaxAggregateInputType
  }

  export type Hak_aksesGroupByOutputType = {
    id: number
    role_id: number
    fungsi_id: number
    akses_id: number
    _count: Hak_aksesCountAggregateOutputType | null
    _avg: Hak_aksesAvgAggregateOutputType | null
    _sum: Hak_aksesSumAggregateOutputType | null
    _min: Hak_aksesMinAggregateOutputType | null
    _max: Hak_aksesMaxAggregateOutputType | null
  }

  type GetHak_aksesGroupByPayload<T extends hak_aksesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Hak_aksesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Hak_aksesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Hak_aksesGroupByOutputType[P]>
            : GetScalarType<T[P], Hak_aksesGroupByOutputType[P]>
        }
      >
    >


  export type hak_aksesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_id?: boolean
    fungsi_id?: boolean
    akses_id?: boolean
    role?: boolean | roleDefaultArgs<ExtArgs>
    fungsi?: boolean | fungsiDefaultArgs<ExtArgs>
    akses?: boolean | aksesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hak_akses"]>

  export type hak_aksesSelectScalar = {
    id?: boolean
    role_id?: boolean
    fungsi_id?: boolean
    akses_id?: boolean
  }

  export type hak_aksesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    role?: boolean | roleDefaultArgs<ExtArgs>
    fungsi?: boolean | fungsiDefaultArgs<ExtArgs>
    akses?: boolean | aksesDefaultArgs<ExtArgs>
  }


  export type $hak_aksesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "hak_akses"
    objects: {
      role: Prisma.$rolePayload<ExtArgs>
      fungsi: Prisma.$fungsiPayload<ExtArgs>
      akses: Prisma.$aksesPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      role_id: number
      fungsi_id: number
      akses_id: number
    }, ExtArgs["result"]["hak_akses"]>
    composites: {}
  }


  type hak_aksesGetPayload<S extends boolean | null | undefined | hak_aksesDefaultArgs> = $Result.GetResult<Prisma.$hak_aksesPayload, S>

  type hak_aksesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<hak_aksesFindManyArgs, 'select' | 'include'> & {
      select?: Hak_aksesCountAggregateInputType | true
    }

  export interface hak_aksesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['hak_akses'], meta: { name: 'hak_akses' } }
    /**
     * Find zero or one Hak_akses that matches the filter.
     * @param {hak_aksesFindUniqueArgs} args - Arguments to find a Hak_akses
     * @example
     * // Get one Hak_akses
     * const hak_akses = await prisma.hak_akses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends hak_aksesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, hak_aksesFindUniqueArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Hak_akses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {hak_aksesFindUniqueOrThrowArgs} args - Arguments to find a Hak_akses
     * @example
     * // Get one Hak_akses
     * const hak_akses = await prisma.hak_akses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends hak_aksesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, hak_aksesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Hak_akses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hak_aksesFindFirstArgs} args - Arguments to find a Hak_akses
     * @example
     * // Get one Hak_akses
     * const hak_akses = await prisma.hak_akses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends hak_aksesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, hak_aksesFindFirstArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Hak_akses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hak_aksesFindFirstOrThrowArgs} args - Arguments to find a Hak_akses
     * @example
     * // Get one Hak_akses
     * const hak_akses = await prisma.hak_akses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends hak_aksesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, hak_aksesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Hak_akses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hak_aksesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hak_akses
     * const hak_akses = await prisma.hak_akses.findMany()
     * 
     * // Get first 10 Hak_akses
     * const hak_akses = await prisma.hak_akses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hak_aksesWithIdOnly = await prisma.hak_akses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends hak_aksesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, hak_aksesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Hak_akses.
     * @param {hak_aksesCreateArgs} args - Arguments to create a Hak_akses.
     * @example
     * // Create one Hak_akses
     * const Hak_akses = await prisma.hak_akses.create({
     *   data: {
     *     // ... data to create a Hak_akses
     *   }
     * })
     * 
    **/
    create<T extends hak_aksesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, hak_aksesCreateArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Hak_akses.
     *     @param {hak_aksesCreateManyArgs} args - Arguments to create many Hak_akses.
     *     @example
     *     // Create many Hak_akses
     *     const hak_akses = await prisma.hak_akses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends hak_aksesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, hak_aksesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hak_akses.
     * @param {hak_aksesDeleteArgs} args - Arguments to delete one Hak_akses.
     * @example
     * // Delete one Hak_akses
     * const Hak_akses = await prisma.hak_akses.delete({
     *   where: {
     *     // ... filter to delete one Hak_akses
     *   }
     * })
     * 
    **/
    delete<T extends hak_aksesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, hak_aksesDeleteArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Hak_akses.
     * @param {hak_aksesUpdateArgs} args - Arguments to update one Hak_akses.
     * @example
     * // Update one Hak_akses
     * const hak_akses = await prisma.hak_akses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends hak_aksesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, hak_aksesUpdateArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Hak_akses.
     * @param {hak_aksesDeleteManyArgs} args - Arguments to filter Hak_akses to delete.
     * @example
     * // Delete a few Hak_akses
     * const { count } = await prisma.hak_akses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends hak_aksesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, hak_aksesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hak_akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hak_aksesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hak_akses
     * const hak_akses = await prisma.hak_akses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends hak_aksesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, hak_aksesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hak_akses.
     * @param {hak_aksesUpsertArgs} args - Arguments to update or create a Hak_akses.
     * @example
     * // Update or create a Hak_akses
     * const hak_akses = await prisma.hak_akses.upsert({
     *   create: {
     *     // ... data to create a Hak_akses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hak_akses we want to update
     *   }
     * })
    **/
    upsert<T extends hak_aksesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, hak_aksesUpsertArgs<ExtArgs>>
    ): Prisma__hak_aksesClient<$Result.GetResult<Prisma.$hak_aksesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Hak_akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hak_aksesCountArgs} args - Arguments to filter Hak_akses to count.
     * @example
     * // Count the number of Hak_akses
     * const count = await prisma.hak_akses.count({
     *   where: {
     *     // ... the filter for the Hak_akses we want to count
     *   }
     * })
    **/
    count<T extends hak_aksesCountArgs>(
      args?: Subset<T, hak_aksesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Hak_aksesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hak_akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Hak_aksesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Hak_aksesAggregateArgs>(args: Subset<T, Hak_aksesAggregateArgs>): Prisma.PrismaPromise<GetHak_aksesAggregateType<T>>

    /**
     * Group by Hak_akses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hak_aksesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends hak_aksesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: hak_aksesGroupByArgs['orderBy'] }
        : { orderBy?: hak_aksesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, hak_aksesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHak_aksesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the hak_akses model
   */
  readonly fields: hak_aksesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for hak_akses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__hak_aksesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    role<T extends roleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, roleDefaultArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    fungsi<T extends fungsiDefaultArgs<ExtArgs> = {}>(args?: Subset<T, fungsiDefaultArgs<ExtArgs>>): Prisma__fungsiClient<$Result.GetResult<Prisma.$fungsiPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    akses<T extends aksesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, aksesDefaultArgs<ExtArgs>>): Prisma__aksesClient<$Result.GetResult<Prisma.$aksesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the hak_akses model
   */ 
  interface hak_aksesFieldRefs {
    readonly id: FieldRef<"hak_akses", 'Int'>
    readonly role_id: FieldRef<"hak_akses", 'Int'>
    readonly fungsi_id: FieldRef<"hak_akses", 'Int'>
    readonly akses_id: FieldRef<"hak_akses", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * hak_akses findUnique
   */
  export type hak_aksesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * Filter, which hak_akses to fetch.
     */
    where: hak_aksesWhereUniqueInput
  }


  /**
   * hak_akses findUniqueOrThrow
   */
  export type hak_aksesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * Filter, which hak_akses to fetch.
     */
    where: hak_aksesWhereUniqueInput
  }


  /**
   * hak_akses findFirst
   */
  export type hak_aksesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * Filter, which hak_akses to fetch.
     */
    where?: hak_aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hak_akses to fetch.
     */
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hak_akses.
     */
    cursor?: hak_aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hak_akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hak_akses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hak_akses.
     */
    distinct?: Hak_aksesScalarFieldEnum | Hak_aksesScalarFieldEnum[]
  }


  /**
   * hak_akses findFirstOrThrow
   */
  export type hak_aksesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * Filter, which hak_akses to fetch.
     */
    where?: hak_aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hak_akses to fetch.
     */
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hak_akses.
     */
    cursor?: hak_aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hak_akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hak_akses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hak_akses.
     */
    distinct?: Hak_aksesScalarFieldEnum | Hak_aksesScalarFieldEnum[]
  }


  /**
   * hak_akses findMany
   */
  export type hak_aksesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * Filter, which hak_akses to fetch.
     */
    where?: hak_aksesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hak_akses to fetch.
     */
    orderBy?: hak_aksesOrderByWithRelationInput | hak_aksesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hak_akses.
     */
    cursor?: hak_aksesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hak_akses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hak_akses.
     */
    skip?: number
    distinct?: Hak_aksesScalarFieldEnum | Hak_aksesScalarFieldEnum[]
  }


  /**
   * hak_akses create
   */
  export type hak_aksesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * The data needed to create a hak_akses.
     */
    data: XOR<hak_aksesCreateInput, hak_aksesUncheckedCreateInput>
  }


  /**
   * hak_akses createMany
   */
  export type hak_aksesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many hak_akses.
     */
    data: hak_aksesCreateManyInput | hak_aksesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * hak_akses update
   */
  export type hak_aksesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * The data needed to update a hak_akses.
     */
    data: XOR<hak_aksesUpdateInput, hak_aksesUncheckedUpdateInput>
    /**
     * Choose, which hak_akses to update.
     */
    where: hak_aksesWhereUniqueInput
  }


  /**
   * hak_akses updateMany
   */
  export type hak_aksesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update hak_akses.
     */
    data: XOR<hak_aksesUpdateManyMutationInput, hak_aksesUncheckedUpdateManyInput>
    /**
     * Filter which hak_akses to update
     */
    where?: hak_aksesWhereInput
  }


  /**
   * hak_akses upsert
   */
  export type hak_aksesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * The filter to search for the hak_akses to update in case it exists.
     */
    where: hak_aksesWhereUniqueInput
    /**
     * In case the hak_akses found by the `where` argument doesn't exist, create a new hak_akses with this data.
     */
    create: XOR<hak_aksesCreateInput, hak_aksesUncheckedCreateInput>
    /**
     * In case the hak_akses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hak_aksesUpdateInput, hak_aksesUncheckedUpdateInput>
  }


  /**
   * hak_akses delete
   */
  export type hak_aksesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
    /**
     * Filter which hak_akses to delete.
     */
    where: hak_aksesWhereUniqueInput
  }


  /**
   * hak_akses deleteMany
   */
  export type hak_aksesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which hak_akses to delete
     */
    where?: hak_aksesWhereInput
  }


  /**
   * hak_akses without action
   */
  export type hak_aksesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hak_akses
     */
    select?: hak_aksesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hak_aksesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    karyawan_id: 'karyawan_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KaryawanScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    nik: 'nik',
    alamat: 'alamat',
    kontak: 'kontak',
    tanggal_lahir: 'tanggal_lahir',
    jenis_kelamin: 'jenis_kelamin',
    role_id: 'role_id',
    no_rekening: 'no_rekening'
  };

  export type KaryawanScalarFieldEnum = (typeof KaryawanScalarFieldEnum)[keyof typeof KaryawanScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    nama: 'nama'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const AksesScalarFieldEnum: {
    id: 'id',
    nama: 'nama'
  };

  export type AksesScalarFieldEnum = (typeof AksesScalarFieldEnum)[keyof typeof AksesScalarFieldEnum]


  export const FungsiScalarFieldEnum: {
    id: 'id',
    nama: 'nama'
  };

  export type FungsiScalarFieldEnum = (typeof FungsiScalarFieldEnum)[keyof typeof FungsiScalarFieldEnum]


  export const Hak_aksesScalarFieldEnum: {
    id: 'id',
    role_id: 'role_id',
    fungsi_id: 'fungsi_id',
    akses_id: 'akses_id'
  };

  export type Hak_aksesScalarFieldEnum = (typeof Hak_aksesScalarFieldEnum)[keyof typeof Hak_aksesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    karyawan_id?: IntFilter<"user"> | number
    karyawan?: XOR<KaryawanRelationFilter, karyawanWhereInput>
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    karyawan_id?: SortOrder
    karyawan?: karyawanOrderByWithRelationInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    karyawan_id?: IntFilter<"user"> | number
    karyawan?: XOR<KaryawanRelationFilter, karyawanWhereInput>
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    karyawan_id?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    karyawan_id?: IntWithAggregatesFilter<"user"> | number
  }

  export type karyawanWhereInput = {
    AND?: karyawanWhereInput | karyawanWhereInput[]
    OR?: karyawanWhereInput[]
    NOT?: karyawanWhereInput | karyawanWhereInput[]
    id?: IntFilter<"karyawan"> | number
    nama?: StringFilter<"karyawan"> | string
    nik?: StringFilter<"karyawan"> | string
    alamat?: StringFilter<"karyawan"> | string
    kontak?: StringFilter<"karyawan"> | string
    tanggal_lahir?: DateTimeFilter<"karyawan"> | Date | string
    jenis_kelamin?: StringFilter<"karyawan"> | string
    role_id?: IntFilter<"karyawan"> | number
    no_rekening?: StringFilter<"karyawan"> | string
    users?: UserListRelationFilter
    role?: XOR<RoleRelationFilter, roleWhereInput>
  }

  export type karyawanOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    alamat?: SortOrder
    kontak?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    role_id?: SortOrder
    no_rekening?: SortOrder
    users?: userOrderByRelationAggregateInput
    role?: roleOrderByWithRelationInput
  }

  export type karyawanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nik?: string
    AND?: karyawanWhereInput | karyawanWhereInput[]
    OR?: karyawanWhereInput[]
    NOT?: karyawanWhereInput | karyawanWhereInput[]
    nama?: StringFilter<"karyawan"> | string
    alamat?: StringFilter<"karyawan"> | string
    kontak?: StringFilter<"karyawan"> | string
    tanggal_lahir?: DateTimeFilter<"karyawan"> | Date | string
    jenis_kelamin?: StringFilter<"karyawan"> | string
    role_id?: IntFilter<"karyawan"> | number
    no_rekening?: StringFilter<"karyawan"> | string
    users?: UserListRelationFilter
    role?: XOR<RoleRelationFilter, roleWhereInput>
  }, "id" | "nik">

  export type karyawanOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    alamat?: SortOrder
    kontak?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    role_id?: SortOrder
    no_rekening?: SortOrder
    _count?: karyawanCountOrderByAggregateInput
    _avg?: karyawanAvgOrderByAggregateInput
    _max?: karyawanMaxOrderByAggregateInput
    _min?: karyawanMinOrderByAggregateInput
    _sum?: karyawanSumOrderByAggregateInput
  }

  export type karyawanScalarWhereWithAggregatesInput = {
    AND?: karyawanScalarWhereWithAggregatesInput | karyawanScalarWhereWithAggregatesInput[]
    OR?: karyawanScalarWhereWithAggregatesInput[]
    NOT?: karyawanScalarWhereWithAggregatesInput | karyawanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"karyawan"> | number
    nama?: StringWithAggregatesFilter<"karyawan"> | string
    nik?: StringWithAggregatesFilter<"karyawan"> | string
    alamat?: StringWithAggregatesFilter<"karyawan"> | string
    kontak?: StringWithAggregatesFilter<"karyawan"> | string
    tanggal_lahir?: DateTimeWithAggregatesFilter<"karyawan"> | Date | string
    jenis_kelamin?: StringWithAggregatesFilter<"karyawan"> | string
    role_id?: IntWithAggregatesFilter<"karyawan"> | number
    no_rekening?: StringWithAggregatesFilter<"karyawan"> | string
  }

  export type roleWhereInput = {
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    id?: IntFilter<"role"> | number
    nama?: StringFilter<"role"> | string
    karyawans?: KaryawanListRelationFilter
    hak_akses?: Hak_aksesListRelationFilter
  }

  export type roleOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    karyawans?: karyawanOrderByRelationAggregateInput
    hak_akses?: hak_aksesOrderByRelationAggregateInput
  }

  export type roleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    nama?: StringFilter<"role"> | string
    karyawans?: KaryawanListRelationFilter
    hak_akses?: Hak_aksesListRelationFilter
  }, "id">

  export type roleOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    OR?: roleScalarWhereWithAggregatesInput[]
    NOT?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"role"> | number
    nama?: StringWithAggregatesFilter<"role"> | string
  }

  export type aksesWhereInput = {
    AND?: aksesWhereInput | aksesWhereInput[]
    OR?: aksesWhereInput[]
    NOT?: aksesWhereInput | aksesWhereInput[]
    id?: IntFilter<"akses"> | number
    nama?: StringFilter<"akses"> | string
    hak_akses?: Hak_aksesListRelationFilter
  }

  export type aksesOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    hak_akses?: hak_aksesOrderByRelationAggregateInput
  }

  export type aksesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: aksesWhereInput | aksesWhereInput[]
    OR?: aksesWhereInput[]
    NOT?: aksesWhereInput | aksesWhereInput[]
    nama?: StringFilter<"akses"> | string
    hak_akses?: Hak_aksesListRelationFilter
  }, "id">

  export type aksesOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    _count?: aksesCountOrderByAggregateInput
    _avg?: aksesAvgOrderByAggregateInput
    _max?: aksesMaxOrderByAggregateInput
    _min?: aksesMinOrderByAggregateInput
    _sum?: aksesSumOrderByAggregateInput
  }

  export type aksesScalarWhereWithAggregatesInput = {
    AND?: aksesScalarWhereWithAggregatesInput | aksesScalarWhereWithAggregatesInput[]
    OR?: aksesScalarWhereWithAggregatesInput[]
    NOT?: aksesScalarWhereWithAggregatesInput | aksesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"akses"> | number
    nama?: StringWithAggregatesFilter<"akses"> | string
  }

  export type fungsiWhereInput = {
    AND?: fungsiWhereInput | fungsiWhereInput[]
    OR?: fungsiWhereInput[]
    NOT?: fungsiWhereInput | fungsiWhereInput[]
    id?: IntFilter<"fungsi"> | number
    nama?: StringFilter<"fungsi"> | string
    hak_akses?: Hak_aksesListRelationFilter
  }

  export type fungsiOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    hak_akses?: hak_aksesOrderByRelationAggregateInput
  }

  export type fungsiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: fungsiWhereInput | fungsiWhereInput[]
    OR?: fungsiWhereInput[]
    NOT?: fungsiWhereInput | fungsiWhereInput[]
    nama?: StringFilter<"fungsi"> | string
    hak_akses?: Hak_aksesListRelationFilter
  }, "id">

  export type fungsiOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    _count?: fungsiCountOrderByAggregateInput
    _avg?: fungsiAvgOrderByAggregateInput
    _max?: fungsiMaxOrderByAggregateInput
    _min?: fungsiMinOrderByAggregateInput
    _sum?: fungsiSumOrderByAggregateInput
  }

  export type fungsiScalarWhereWithAggregatesInput = {
    AND?: fungsiScalarWhereWithAggregatesInput | fungsiScalarWhereWithAggregatesInput[]
    OR?: fungsiScalarWhereWithAggregatesInput[]
    NOT?: fungsiScalarWhereWithAggregatesInput | fungsiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"fungsi"> | number
    nama?: StringWithAggregatesFilter<"fungsi"> | string
  }

  export type hak_aksesWhereInput = {
    AND?: hak_aksesWhereInput | hak_aksesWhereInput[]
    OR?: hak_aksesWhereInput[]
    NOT?: hak_aksesWhereInput | hak_aksesWhereInput[]
    id?: IntFilter<"hak_akses"> | number
    role_id?: IntFilter<"hak_akses"> | number
    fungsi_id?: IntFilter<"hak_akses"> | number
    akses_id?: IntFilter<"hak_akses"> | number
    role?: XOR<RoleRelationFilter, roleWhereInput>
    fungsi?: XOR<FungsiRelationFilter, fungsiWhereInput>
    akses?: XOR<AksesRelationFilter, aksesWhereInput>
  }

  export type hak_aksesOrderByWithRelationInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
    role?: roleOrderByWithRelationInput
    fungsi?: fungsiOrderByWithRelationInput
    akses?: aksesOrderByWithRelationInput
  }

  export type hak_aksesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    HakAksesConstraint?: hak_aksesHakAksesConstraintCompoundUniqueInput
    AND?: hak_aksesWhereInput | hak_aksesWhereInput[]
    OR?: hak_aksesWhereInput[]
    NOT?: hak_aksesWhereInput | hak_aksesWhereInput[]
    role_id?: IntFilter<"hak_akses"> | number
    fungsi_id?: IntFilter<"hak_akses"> | number
    akses_id?: IntFilter<"hak_akses"> | number
    role?: XOR<RoleRelationFilter, roleWhereInput>
    fungsi?: XOR<FungsiRelationFilter, fungsiWhereInput>
    akses?: XOR<AksesRelationFilter, aksesWhereInput>
  }, "id" | "HakAksesConstraint">

  export type hak_aksesOrderByWithAggregationInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
    _count?: hak_aksesCountOrderByAggregateInput
    _avg?: hak_aksesAvgOrderByAggregateInput
    _max?: hak_aksesMaxOrderByAggregateInput
    _min?: hak_aksesMinOrderByAggregateInput
    _sum?: hak_aksesSumOrderByAggregateInput
  }

  export type hak_aksesScalarWhereWithAggregatesInput = {
    AND?: hak_aksesScalarWhereWithAggregatesInput | hak_aksesScalarWhereWithAggregatesInput[]
    OR?: hak_aksesScalarWhereWithAggregatesInput[]
    NOT?: hak_aksesScalarWhereWithAggregatesInput | hak_aksesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"hak_akses"> | number
    role_id?: IntWithAggregatesFilter<"hak_akses"> | number
    fungsi_id?: IntWithAggregatesFilter<"hak_akses"> | number
    akses_id?: IntWithAggregatesFilter<"hak_akses"> | number
  }

  export type userCreateInput = {
    email: string
    password: string
    karyawan: karyawanCreateNestedOneWithoutUsersInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    karyawan_id: number
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    karyawan?: karyawanUpdateOneRequiredWithoutUsersNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    karyawan_id?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateManyInput = {
    id?: number
    email: string
    password: string
    karyawan_id: number
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    karyawan_id?: IntFieldUpdateOperationsInput | number
  }

  export type karyawanCreateInput = {
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    no_rekening: string
    users?: userCreateNestedManyWithoutKaryawanInput
    role: roleCreateNestedOneWithoutKaryawansInput
  }

  export type karyawanUncheckedCreateInput = {
    id?: number
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    role_id: number
    no_rekening: string
    users?: userUncheckedCreateNestedManyWithoutKaryawanInput
  }

  export type karyawanUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    no_rekening?: StringFieldUpdateOperationsInput | string
    users?: userUpdateManyWithoutKaryawanNestedInput
    role?: roleUpdateOneRequiredWithoutKaryawansNestedInput
  }

  export type karyawanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    no_rekening?: StringFieldUpdateOperationsInput | string
    users?: userUncheckedUpdateManyWithoutKaryawanNestedInput
  }

  export type karyawanCreateManyInput = {
    id?: number
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    role_id: number
    no_rekening: string
  }

  export type karyawanUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    no_rekening?: StringFieldUpdateOperationsInput | string
  }

  export type karyawanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    no_rekening?: StringFieldUpdateOperationsInput | string
  }

  export type roleCreateInput = {
    nama: string
    karyawans?: karyawanCreateNestedManyWithoutRoleInput
    hak_akses?: hak_aksesCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateInput = {
    id?: number
    nama: string
    karyawans?: karyawanUncheckedCreateNestedManyWithoutRoleInput
    hak_akses?: hak_aksesUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    karyawans?: karyawanUpdateManyWithoutRoleNestedInput
    hak_akses?: hak_aksesUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    karyawans?: karyawanUncheckedUpdateManyWithoutRoleNestedInput
    hak_akses?: hak_aksesUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type roleCreateManyInput = {
    id?: number
    nama: string
  }

  export type roleUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type aksesCreateInput = {
    nama: string
    hak_akses?: hak_aksesCreateNestedManyWithoutAksesInput
  }

  export type aksesUncheckedCreateInput = {
    id?: number
    nama: string
    hak_akses?: hak_aksesUncheckedCreateNestedManyWithoutAksesInput
  }

  export type aksesUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    hak_akses?: hak_aksesUpdateManyWithoutAksesNestedInput
  }

  export type aksesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    hak_akses?: hak_aksesUncheckedUpdateManyWithoutAksesNestedInput
  }

  export type aksesCreateManyInput = {
    id?: number
    nama: string
  }

  export type aksesUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type aksesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type fungsiCreateInput = {
    nama: string
    hak_akses?: hak_aksesCreateNestedManyWithoutFungsiInput
  }

  export type fungsiUncheckedCreateInput = {
    id?: number
    nama: string
    hak_akses?: hak_aksesUncheckedCreateNestedManyWithoutFungsiInput
  }

  export type fungsiUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    hak_akses?: hak_aksesUpdateManyWithoutFungsiNestedInput
  }

  export type fungsiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    hak_akses?: hak_aksesUncheckedUpdateManyWithoutFungsiNestedInput
  }

  export type fungsiCreateManyInput = {
    id?: number
    nama: string
  }

  export type fungsiUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type fungsiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type hak_aksesCreateInput = {
    role: roleCreateNestedOneWithoutHak_aksesInput
    fungsi: fungsiCreateNestedOneWithoutHak_aksesInput
    akses: aksesCreateNestedOneWithoutHak_aksesInput
  }

  export type hak_aksesUncheckedCreateInput = {
    id?: number
    role_id: number
    fungsi_id: number
    akses_id: number
  }

  export type hak_aksesUpdateInput = {
    role?: roleUpdateOneRequiredWithoutHak_aksesNestedInput
    fungsi?: fungsiUpdateOneRequiredWithoutHak_aksesNestedInput
    akses?: aksesUpdateOneRequiredWithoutHak_aksesNestedInput
  }

  export type hak_aksesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    fungsi_id?: IntFieldUpdateOperationsInput | number
    akses_id?: IntFieldUpdateOperationsInput | number
  }

  export type hak_aksesCreateManyInput = {
    id?: number
    role_id: number
    fungsi_id: number
    akses_id: number
  }

  export type hak_aksesUpdateManyMutationInput = {

  }

  export type hak_aksesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    fungsi_id?: IntFieldUpdateOperationsInput | number
    akses_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type KaryawanRelationFilter = {
    is?: karyawanWhereInput
    isNot?: karyawanWhereInput
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    karyawan_id?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    karyawan_id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    karyawan_id?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    karyawan_id?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    karyawan_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type RoleRelationFilter = {
    is?: roleWhereInput
    isNot?: roleWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type karyawanCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    alamat?: SortOrder
    kontak?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    role_id?: SortOrder
    no_rekening?: SortOrder
  }

  export type karyawanAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type karyawanMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    alamat?: SortOrder
    kontak?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    role_id?: SortOrder
    no_rekening?: SortOrder
  }

  export type karyawanMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    nik?: SortOrder
    alamat?: SortOrder
    kontak?: SortOrder
    tanggal_lahir?: SortOrder
    jenis_kelamin?: SortOrder
    role_id?: SortOrder
    no_rekening?: SortOrder
  }

  export type karyawanSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type KaryawanListRelationFilter = {
    every?: karyawanWhereInput
    some?: karyawanWhereInput
    none?: karyawanWhereInput
  }

  export type Hak_aksesListRelationFilter = {
    every?: hak_aksesWhereInput
    some?: hak_aksesWhereInput
    none?: hak_aksesWhereInput
  }

  export type karyawanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type hak_aksesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roleCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type aksesCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type aksesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type aksesMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type aksesMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type aksesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type fungsiCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type fungsiAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type fungsiMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type fungsiMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
  }

  export type fungsiSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FungsiRelationFilter = {
    is?: fungsiWhereInput
    isNot?: fungsiWhereInput
  }

  export type AksesRelationFilter = {
    is?: aksesWhereInput
    isNot?: aksesWhereInput
  }

  export type hak_aksesHakAksesConstraintCompoundUniqueInput = {
    role_id: number
    fungsi_id: number
    akses_id: number
  }

  export type hak_aksesCountOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
  }

  export type hak_aksesAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
  }

  export type hak_aksesMaxOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
  }

  export type hak_aksesMinOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
  }

  export type hak_aksesSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    fungsi_id?: SortOrder
    akses_id?: SortOrder
  }

  export type karyawanCreateNestedOneWithoutUsersInput = {
    create?: XOR<karyawanCreateWithoutUsersInput, karyawanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: karyawanCreateOrConnectWithoutUsersInput
    connect?: karyawanWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type karyawanUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<karyawanCreateWithoutUsersInput, karyawanUncheckedCreateWithoutUsersInput>
    connectOrCreate?: karyawanCreateOrConnectWithoutUsersInput
    upsert?: karyawanUpsertWithoutUsersInput
    connect?: karyawanWhereUniqueInput
    update?: XOR<XOR<karyawanUpdateToOneWithWhereWithoutUsersInput, karyawanUpdateWithoutUsersInput>, karyawanUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userCreateNestedManyWithoutKaryawanInput = {
    create?: XOR<userCreateWithoutKaryawanInput, userUncheckedCreateWithoutKaryawanInput> | userCreateWithoutKaryawanInput[] | userUncheckedCreateWithoutKaryawanInput[]
    connectOrCreate?: userCreateOrConnectWithoutKaryawanInput | userCreateOrConnectWithoutKaryawanInput[]
    createMany?: userCreateManyKaryawanInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type roleCreateNestedOneWithoutKaryawansInput = {
    create?: XOR<roleCreateWithoutKaryawansInput, roleUncheckedCreateWithoutKaryawansInput>
    connectOrCreate?: roleCreateOrConnectWithoutKaryawansInput
    connect?: roleWhereUniqueInput
  }

  export type userUncheckedCreateNestedManyWithoutKaryawanInput = {
    create?: XOR<userCreateWithoutKaryawanInput, userUncheckedCreateWithoutKaryawanInput> | userCreateWithoutKaryawanInput[] | userUncheckedCreateWithoutKaryawanInput[]
    connectOrCreate?: userCreateOrConnectWithoutKaryawanInput | userCreateOrConnectWithoutKaryawanInput[]
    createMany?: userCreateManyKaryawanInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type userUpdateManyWithoutKaryawanNestedInput = {
    create?: XOR<userCreateWithoutKaryawanInput, userUncheckedCreateWithoutKaryawanInput> | userCreateWithoutKaryawanInput[] | userUncheckedCreateWithoutKaryawanInput[]
    connectOrCreate?: userCreateOrConnectWithoutKaryawanInput | userCreateOrConnectWithoutKaryawanInput[]
    upsert?: userUpsertWithWhereUniqueWithoutKaryawanInput | userUpsertWithWhereUniqueWithoutKaryawanInput[]
    createMany?: userCreateManyKaryawanInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutKaryawanInput | userUpdateWithWhereUniqueWithoutKaryawanInput[]
    updateMany?: userUpdateManyWithWhereWithoutKaryawanInput | userUpdateManyWithWhereWithoutKaryawanInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type roleUpdateOneRequiredWithoutKaryawansNestedInput = {
    create?: XOR<roleCreateWithoutKaryawansInput, roleUncheckedCreateWithoutKaryawansInput>
    connectOrCreate?: roleCreateOrConnectWithoutKaryawansInput
    upsert?: roleUpsertWithoutKaryawansInput
    connect?: roleWhereUniqueInput
    update?: XOR<XOR<roleUpdateToOneWithWhereWithoutKaryawansInput, roleUpdateWithoutKaryawansInput>, roleUncheckedUpdateWithoutKaryawansInput>
  }

  export type userUncheckedUpdateManyWithoutKaryawanNestedInput = {
    create?: XOR<userCreateWithoutKaryawanInput, userUncheckedCreateWithoutKaryawanInput> | userCreateWithoutKaryawanInput[] | userUncheckedCreateWithoutKaryawanInput[]
    connectOrCreate?: userCreateOrConnectWithoutKaryawanInput | userCreateOrConnectWithoutKaryawanInput[]
    upsert?: userUpsertWithWhereUniqueWithoutKaryawanInput | userUpsertWithWhereUniqueWithoutKaryawanInput[]
    createMany?: userCreateManyKaryawanInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutKaryawanInput | userUpdateWithWhereUniqueWithoutKaryawanInput[]
    updateMany?: userUpdateManyWithWhereWithoutKaryawanInput | userUpdateManyWithWhereWithoutKaryawanInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type karyawanCreateNestedManyWithoutRoleInput = {
    create?: XOR<karyawanCreateWithoutRoleInput, karyawanUncheckedCreateWithoutRoleInput> | karyawanCreateWithoutRoleInput[] | karyawanUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: karyawanCreateOrConnectWithoutRoleInput | karyawanCreateOrConnectWithoutRoleInput[]
    createMany?: karyawanCreateManyRoleInputEnvelope
    connect?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
  }

  export type hak_aksesCreateNestedManyWithoutRoleInput = {
    create?: XOR<hak_aksesCreateWithoutRoleInput, hak_aksesUncheckedCreateWithoutRoleInput> | hak_aksesCreateWithoutRoleInput[] | hak_aksesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutRoleInput | hak_aksesCreateOrConnectWithoutRoleInput[]
    createMany?: hak_aksesCreateManyRoleInputEnvelope
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
  }

  export type karyawanUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<karyawanCreateWithoutRoleInput, karyawanUncheckedCreateWithoutRoleInput> | karyawanCreateWithoutRoleInput[] | karyawanUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: karyawanCreateOrConnectWithoutRoleInput | karyawanCreateOrConnectWithoutRoleInput[]
    createMany?: karyawanCreateManyRoleInputEnvelope
    connect?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
  }

  export type hak_aksesUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<hak_aksesCreateWithoutRoleInput, hak_aksesUncheckedCreateWithoutRoleInput> | hak_aksesCreateWithoutRoleInput[] | hak_aksesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutRoleInput | hak_aksesCreateOrConnectWithoutRoleInput[]
    createMany?: hak_aksesCreateManyRoleInputEnvelope
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
  }

  export type karyawanUpdateManyWithoutRoleNestedInput = {
    create?: XOR<karyawanCreateWithoutRoleInput, karyawanUncheckedCreateWithoutRoleInput> | karyawanCreateWithoutRoleInput[] | karyawanUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: karyawanCreateOrConnectWithoutRoleInput | karyawanCreateOrConnectWithoutRoleInput[]
    upsert?: karyawanUpsertWithWhereUniqueWithoutRoleInput | karyawanUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: karyawanCreateManyRoleInputEnvelope
    set?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    disconnect?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    delete?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    connect?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    update?: karyawanUpdateWithWhereUniqueWithoutRoleInput | karyawanUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: karyawanUpdateManyWithWhereWithoutRoleInput | karyawanUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: karyawanScalarWhereInput | karyawanScalarWhereInput[]
  }

  export type hak_aksesUpdateManyWithoutRoleNestedInput = {
    create?: XOR<hak_aksesCreateWithoutRoleInput, hak_aksesUncheckedCreateWithoutRoleInput> | hak_aksesCreateWithoutRoleInput[] | hak_aksesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutRoleInput | hak_aksesCreateOrConnectWithoutRoleInput[]
    upsert?: hak_aksesUpsertWithWhereUniqueWithoutRoleInput | hak_aksesUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: hak_aksesCreateManyRoleInputEnvelope
    set?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    disconnect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    delete?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    update?: hak_aksesUpdateWithWhereUniqueWithoutRoleInput | hak_aksesUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: hak_aksesUpdateManyWithWhereWithoutRoleInput | hak_aksesUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
  }

  export type karyawanUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<karyawanCreateWithoutRoleInput, karyawanUncheckedCreateWithoutRoleInput> | karyawanCreateWithoutRoleInput[] | karyawanUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: karyawanCreateOrConnectWithoutRoleInput | karyawanCreateOrConnectWithoutRoleInput[]
    upsert?: karyawanUpsertWithWhereUniqueWithoutRoleInput | karyawanUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: karyawanCreateManyRoleInputEnvelope
    set?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    disconnect?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    delete?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    connect?: karyawanWhereUniqueInput | karyawanWhereUniqueInput[]
    update?: karyawanUpdateWithWhereUniqueWithoutRoleInput | karyawanUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: karyawanUpdateManyWithWhereWithoutRoleInput | karyawanUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: karyawanScalarWhereInput | karyawanScalarWhereInput[]
  }

  export type hak_aksesUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<hak_aksesCreateWithoutRoleInput, hak_aksesUncheckedCreateWithoutRoleInput> | hak_aksesCreateWithoutRoleInput[] | hak_aksesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutRoleInput | hak_aksesCreateOrConnectWithoutRoleInput[]
    upsert?: hak_aksesUpsertWithWhereUniqueWithoutRoleInput | hak_aksesUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: hak_aksesCreateManyRoleInputEnvelope
    set?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    disconnect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    delete?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    update?: hak_aksesUpdateWithWhereUniqueWithoutRoleInput | hak_aksesUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: hak_aksesUpdateManyWithWhereWithoutRoleInput | hak_aksesUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
  }

  export type hak_aksesCreateNestedManyWithoutAksesInput = {
    create?: XOR<hak_aksesCreateWithoutAksesInput, hak_aksesUncheckedCreateWithoutAksesInput> | hak_aksesCreateWithoutAksesInput[] | hak_aksesUncheckedCreateWithoutAksesInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutAksesInput | hak_aksesCreateOrConnectWithoutAksesInput[]
    createMany?: hak_aksesCreateManyAksesInputEnvelope
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
  }

  export type hak_aksesUncheckedCreateNestedManyWithoutAksesInput = {
    create?: XOR<hak_aksesCreateWithoutAksesInput, hak_aksesUncheckedCreateWithoutAksesInput> | hak_aksesCreateWithoutAksesInput[] | hak_aksesUncheckedCreateWithoutAksesInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutAksesInput | hak_aksesCreateOrConnectWithoutAksesInput[]
    createMany?: hak_aksesCreateManyAksesInputEnvelope
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
  }

  export type hak_aksesUpdateManyWithoutAksesNestedInput = {
    create?: XOR<hak_aksesCreateWithoutAksesInput, hak_aksesUncheckedCreateWithoutAksesInput> | hak_aksesCreateWithoutAksesInput[] | hak_aksesUncheckedCreateWithoutAksesInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutAksesInput | hak_aksesCreateOrConnectWithoutAksesInput[]
    upsert?: hak_aksesUpsertWithWhereUniqueWithoutAksesInput | hak_aksesUpsertWithWhereUniqueWithoutAksesInput[]
    createMany?: hak_aksesCreateManyAksesInputEnvelope
    set?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    disconnect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    delete?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    update?: hak_aksesUpdateWithWhereUniqueWithoutAksesInput | hak_aksesUpdateWithWhereUniqueWithoutAksesInput[]
    updateMany?: hak_aksesUpdateManyWithWhereWithoutAksesInput | hak_aksesUpdateManyWithWhereWithoutAksesInput[]
    deleteMany?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
  }

  export type hak_aksesUncheckedUpdateManyWithoutAksesNestedInput = {
    create?: XOR<hak_aksesCreateWithoutAksesInput, hak_aksesUncheckedCreateWithoutAksesInput> | hak_aksesCreateWithoutAksesInput[] | hak_aksesUncheckedCreateWithoutAksesInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutAksesInput | hak_aksesCreateOrConnectWithoutAksesInput[]
    upsert?: hak_aksesUpsertWithWhereUniqueWithoutAksesInput | hak_aksesUpsertWithWhereUniqueWithoutAksesInput[]
    createMany?: hak_aksesCreateManyAksesInputEnvelope
    set?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    disconnect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    delete?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    update?: hak_aksesUpdateWithWhereUniqueWithoutAksesInput | hak_aksesUpdateWithWhereUniqueWithoutAksesInput[]
    updateMany?: hak_aksesUpdateManyWithWhereWithoutAksesInput | hak_aksesUpdateManyWithWhereWithoutAksesInput[]
    deleteMany?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
  }

  export type hak_aksesCreateNestedManyWithoutFungsiInput = {
    create?: XOR<hak_aksesCreateWithoutFungsiInput, hak_aksesUncheckedCreateWithoutFungsiInput> | hak_aksesCreateWithoutFungsiInput[] | hak_aksesUncheckedCreateWithoutFungsiInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutFungsiInput | hak_aksesCreateOrConnectWithoutFungsiInput[]
    createMany?: hak_aksesCreateManyFungsiInputEnvelope
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
  }

  export type hak_aksesUncheckedCreateNestedManyWithoutFungsiInput = {
    create?: XOR<hak_aksesCreateWithoutFungsiInput, hak_aksesUncheckedCreateWithoutFungsiInput> | hak_aksesCreateWithoutFungsiInput[] | hak_aksesUncheckedCreateWithoutFungsiInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutFungsiInput | hak_aksesCreateOrConnectWithoutFungsiInput[]
    createMany?: hak_aksesCreateManyFungsiInputEnvelope
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
  }

  export type hak_aksesUpdateManyWithoutFungsiNestedInput = {
    create?: XOR<hak_aksesCreateWithoutFungsiInput, hak_aksesUncheckedCreateWithoutFungsiInput> | hak_aksesCreateWithoutFungsiInput[] | hak_aksesUncheckedCreateWithoutFungsiInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutFungsiInput | hak_aksesCreateOrConnectWithoutFungsiInput[]
    upsert?: hak_aksesUpsertWithWhereUniqueWithoutFungsiInput | hak_aksesUpsertWithWhereUniqueWithoutFungsiInput[]
    createMany?: hak_aksesCreateManyFungsiInputEnvelope
    set?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    disconnect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    delete?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    update?: hak_aksesUpdateWithWhereUniqueWithoutFungsiInput | hak_aksesUpdateWithWhereUniqueWithoutFungsiInput[]
    updateMany?: hak_aksesUpdateManyWithWhereWithoutFungsiInput | hak_aksesUpdateManyWithWhereWithoutFungsiInput[]
    deleteMany?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
  }

  export type hak_aksesUncheckedUpdateManyWithoutFungsiNestedInput = {
    create?: XOR<hak_aksesCreateWithoutFungsiInput, hak_aksesUncheckedCreateWithoutFungsiInput> | hak_aksesCreateWithoutFungsiInput[] | hak_aksesUncheckedCreateWithoutFungsiInput[]
    connectOrCreate?: hak_aksesCreateOrConnectWithoutFungsiInput | hak_aksesCreateOrConnectWithoutFungsiInput[]
    upsert?: hak_aksesUpsertWithWhereUniqueWithoutFungsiInput | hak_aksesUpsertWithWhereUniqueWithoutFungsiInput[]
    createMany?: hak_aksesCreateManyFungsiInputEnvelope
    set?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    disconnect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    delete?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    connect?: hak_aksesWhereUniqueInput | hak_aksesWhereUniqueInput[]
    update?: hak_aksesUpdateWithWhereUniqueWithoutFungsiInput | hak_aksesUpdateWithWhereUniqueWithoutFungsiInput[]
    updateMany?: hak_aksesUpdateManyWithWhereWithoutFungsiInput | hak_aksesUpdateManyWithWhereWithoutFungsiInput[]
    deleteMany?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
  }

  export type roleCreateNestedOneWithoutHak_aksesInput = {
    create?: XOR<roleCreateWithoutHak_aksesInput, roleUncheckedCreateWithoutHak_aksesInput>
    connectOrCreate?: roleCreateOrConnectWithoutHak_aksesInput
    connect?: roleWhereUniqueInput
  }

  export type fungsiCreateNestedOneWithoutHak_aksesInput = {
    create?: XOR<fungsiCreateWithoutHak_aksesInput, fungsiUncheckedCreateWithoutHak_aksesInput>
    connectOrCreate?: fungsiCreateOrConnectWithoutHak_aksesInput
    connect?: fungsiWhereUniqueInput
  }

  export type aksesCreateNestedOneWithoutHak_aksesInput = {
    create?: XOR<aksesCreateWithoutHak_aksesInput, aksesUncheckedCreateWithoutHak_aksesInput>
    connectOrCreate?: aksesCreateOrConnectWithoutHak_aksesInput
    connect?: aksesWhereUniqueInput
  }

  export type roleUpdateOneRequiredWithoutHak_aksesNestedInput = {
    create?: XOR<roleCreateWithoutHak_aksesInput, roleUncheckedCreateWithoutHak_aksesInput>
    connectOrCreate?: roleCreateOrConnectWithoutHak_aksesInput
    upsert?: roleUpsertWithoutHak_aksesInput
    connect?: roleWhereUniqueInput
    update?: XOR<XOR<roleUpdateToOneWithWhereWithoutHak_aksesInput, roleUpdateWithoutHak_aksesInput>, roleUncheckedUpdateWithoutHak_aksesInput>
  }

  export type fungsiUpdateOneRequiredWithoutHak_aksesNestedInput = {
    create?: XOR<fungsiCreateWithoutHak_aksesInput, fungsiUncheckedCreateWithoutHak_aksesInput>
    connectOrCreate?: fungsiCreateOrConnectWithoutHak_aksesInput
    upsert?: fungsiUpsertWithoutHak_aksesInput
    connect?: fungsiWhereUniqueInput
    update?: XOR<XOR<fungsiUpdateToOneWithWhereWithoutHak_aksesInput, fungsiUpdateWithoutHak_aksesInput>, fungsiUncheckedUpdateWithoutHak_aksesInput>
  }

  export type aksesUpdateOneRequiredWithoutHak_aksesNestedInput = {
    create?: XOR<aksesCreateWithoutHak_aksesInput, aksesUncheckedCreateWithoutHak_aksesInput>
    connectOrCreate?: aksesCreateOrConnectWithoutHak_aksesInput
    upsert?: aksesUpsertWithoutHak_aksesInput
    connect?: aksesWhereUniqueInput
    update?: XOR<XOR<aksesUpdateToOneWithWhereWithoutHak_aksesInput, aksesUpdateWithoutHak_aksesInput>, aksesUncheckedUpdateWithoutHak_aksesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type karyawanCreateWithoutUsersInput = {
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    no_rekening: string
    role: roleCreateNestedOneWithoutKaryawansInput
  }

  export type karyawanUncheckedCreateWithoutUsersInput = {
    id?: number
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    role_id: number
    no_rekening: string
  }

  export type karyawanCreateOrConnectWithoutUsersInput = {
    where: karyawanWhereUniqueInput
    create: XOR<karyawanCreateWithoutUsersInput, karyawanUncheckedCreateWithoutUsersInput>
  }

  export type karyawanUpsertWithoutUsersInput = {
    update: XOR<karyawanUpdateWithoutUsersInput, karyawanUncheckedUpdateWithoutUsersInput>
    create: XOR<karyawanCreateWithoutUsersInput, karyawanUncheckedCreateWithoutUsersInput>
    where?: karyawanWhereInput
  }

  export type karyawanUpdateToOneWithWhereWithoutUsersInput = {
    where?: karyawanWhereInput
    data: XOR<karyawanUpdateWithoutUsersInput, karyawanUncheckedUpdateWithoutUsersInput>
  }

  export type karyawanUpdateWithoutUsersInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    no_rekening?: StringFieldUpdateOperationsInput | string
    role?: roleUpdateOneRequiredWithoutKaryawansNestedInput
  }

  export type karyawanUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    no_rekening?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateWithoutKaryawanInput = {
    email: string
    password: string
  }

  export type userUncheckedCreateWithoutKaryawanInput = {
    id?: number
    email: string
    password: string
  }

  export type userCreateOrConnectWithoutKaryawanInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutKaryawanInput, userUncheckedCreateWithoutKaryawanInput>
  }

  export type userCreateManyKaryawanInputEnvelope = {
    data: userCreateManyKaryawanInput | userCreateManyKaryawanInput[]
    skipDuplicates?: boolean
  }

  export type roleCreateWithoutKaryawansInput = {
    nama: string
    hak_akses?: hak_aksesCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateWithoutKaryawansInput = {
    id?: number
    nama: string
    hak_akses?: hak_aksesUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleCreateOrConnectWithoutKaryawansInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutKaryawansInput, roleUncheckedCreateWithoutKaryawansInput>
  }

  export type userUpsertWithWhereUniqueWithoutKaryawanInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutKaryawanInput, userUncheckedUpdateWithoutKaryawanInput>
    create: XOR<userCreateWithoutKaryawanInput, userUncheckedCreateWithoutKaryawanInput>
  }

  export type userUpdateWithWhereUniqueWithoutKaryawanInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutKaryawanInput, userUncheckedUpdateWithoutKaryawanInput>
  }

  export type userUpdateManyWithWhereWithoutKaryawanInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutKaryawanInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    id?: IntFilter<"user"> | number
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    karyawan_id?: IntFilter<"user"> | number
  }

  export type roleUpsertWithoutKaryawansInput = {
    update: XOR<roleUpdateWithoutKaryawansInput, roleUncheckedUpdateWithoutKaryawansInput>
    create: XOR<roleCreateWithoutKaryawansInput, roleUncheckedCreateWithoutKaryawansInput>
    where?: roleWhereInput
  }

  export type roleUpdateToOneWithWhereWithoutKaryawansInput = {
    where?: roleWhereInput
    data: XOR<roleUpdateWithoutKaryawansInput, roleUncheckedUpdateWithoutKaryawansInput>
  }

  export type roleUpdateWithoutKaryawansInput = {
    nama?: StringFieldUpdateOperationsInput | string
    hak_akses?: hak_aksesUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateWithoutKaryawansInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    hak_akses?: hak_aksesUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type karyawanCreateWithoutRoleInput = {
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    no_rekening: string
    users?: userCreateNestedManyWithoutKaryawanInput
  }

  export type karyawanUncheckedCreateWithoutRoleInput = {
    id?: number
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    no_rekening: string
    users?: userUncheckedCreateNestedManyWithoutKaryawanInput
  }

  export type karyawanCreateOrConnectWithoutRoleInput = {
    where: karyawanWhereUniqueInput
    create: XOR<karyawanCreateWithoutRoleInput, karyawanUncheckedCreateWithoutRoleInput>
  }

  export type karyawanCreateManyRoleInputEnvelope = {
    data: karyawanCreateManyRoleInput | karyawanCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type hak_aksesCreateWithoutRoleInput = {
    fungsi: fungsiCreateNestedOneWithoutHak_aksesInput
    akses: aksesCreateNestedOneWithoutHak_aksesInput
  }

  export type hak_aksesUncheckedCreateWithoutRoleInput = {
    id?: number
    fungsi_id: number
    akses_id: number
  }

  export type hak_aksesCreateOrConnectWithoutRoleInput = {
    where: hak_aksesWhereUniqueInput
    create: XOR<hak_aksesCreateWithoutRoleInput, hak_aksesUncheckedCreateWithoutRoleInput>
  }

  export type hak_aksesCreateManyRoleInputEnvelope = {
    data: hak_aksesCreateManyRoleInput | hak_aksesCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type karyawanUpsertWithWhereUniqueWithoutRoleInput = {
    where: karyawanWhereUniqueInput
    update: XOR<karyawanUpdateWithoutRoleInput, karyawanUncheckedUpdateWithoutRoleInput>
    create: XOR<karyawanCreateWithoutRoleInput, karyawanUncheckedCreateWithoutRoleInput>
  }

  export type karyawanUpdateWithWhereUniqueWithoutRoleInput = {
    where: karyawanWhereUniqueInput
    data: XOR<karyawanUpdateWithoutRoleInput, karyawanUncheckedUpdateWithoutRoleInput>
  }

  export type karyawanUpdateManyWithWhereWithoutRoleInput = {
    where: karyawanScalarWhereInput
    data: XOR<karyawanUpdateManyMutationInput, karyawanUncheckedUpdateManyWithoutRoleInput>
  }

  export type karyawanScalarWhereInput = {
    AND?: karyawanScalarWhereInput | karyawanScalarWhereInput[]
    OR?: karyawanScalarWhereInput[]
    NOT?: karyawanScalarWhereInput | karyawanScalarWhereInput[]
    id?: IntFilter<"karyawan"> | number
    nama?: StringFilter<"karyawan"> | string
    nik?: StringFilter<"karyawan"> | string
    alamat?: StringFilter<"karyawan"> | string
    kontak?: StringFilter<"karyawan"> | string
    tanggal_lahir?: DateTimeFilter<"karyawan"> | Date | string
    jenis_kelamin?: StringFilter<"karyawan"> | string
    role_id?: IntFilter<"karyawan"> | number
    no_rekening?: StringFilter<"karyawan"> | string
  }

  export type hak_aksesUpsertWithWhereUniqueWithoutRoleInput = {
    where: hak_aksesWhereUniqueInput
    update: XOR<hak_aksesUpdateWithoutRoleInput, hak_aksesUncheckedUpdateWithoutRoleInput>
    create: XOR<hak_aksesCreateWithoutRoleInput, hak_aksesUncheckedCreateWithoutRoleInput>
  }

  export type hak_aksesUpdateWithWhereUniqueWithoutRoleInput = {
    where: hak_aksesWhereUniqueInput
    data: XOR<hak_aksesUpdateWithoutRoleInput, hak_aksesUncheckedUpdateWithoutRoleInput>
  }

  export type hak_aksesUpdateManyWithWhereWithoutRoleInput = {
    where: hak_aksesScalarWhereInput
    data: XOR<hak_aksesUpdateManyMutationInput, hak_aksesUncheckedUpdateManyWithoutRoleInput>
  }

  export type hak_aksesScalarWhereInput = {
    AND?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
    OR?: hak_aksesScalarWhereInput[]
    NOT?: hak_aksesScalarWhereInput | hak_aksesScalarWhereInput[]
    id?: IntFilter<"hak_akses"> | number
    role_id?: IntFilter<"hak_akses"> | number
    fungsi_id?: IntFilter<"hak_akses"> | number
    akses_id?: IntFilter<"hak_akses"> | number
  }

  export type hak_aksesCreateWithoutAksesInput = {
    role: roleCreateNestedOneWithoutHak_aksesInput
    fungsi: fungsiCreateNestedOneWithoutHak_aksesInput
  }

  export type hak_aksesUncheckedCreateWithoutAksesInput = {
    id?: number
    role_id: number
    fungsi_id: number
  }

  export type hak_aksesCreateOrConnectWithoutAksesInput = {
    where: hak_aksesWhereUniqueInput
    create: XOR<hak_aksesCreateWithoutAksesInput, hak_aksesUncheckedCreateWithoutAksesInput>
  }

  export type hak_aksesCreateManyAksesInputEnvelope = {
    data: hak_aksesCreateManyAksesInput | hak_aksesCreateManyAksesInput[]
    skipDuplicates?: boolean
  }

  export type hak_aksesUpsertWithWhereUniqueWithoutAksesInput = {
    where: hak_aksesWhereUniqueInput
    update: XOR<hak_aksesUpdateWithoutAksesInput, hak_aksesUncheckedUpdateWithoutAksesInput>
    create: XOR<hak_aksesCreateWithoutAksesInput, hak_aksesUncheckedCreateWithoutAksesInput>
  }

  export type hak_aksesUpdateWithWhereUniqueWithoutAksesInput = {
    where: hak_aksesWhereUniqueInput
    data: XOR<hak_aksesUpdateWithoutAksesInput, hak_aksesUncheckedUpdateWithoutAksesInput>
  }

  export type hak_aksesUpdateManyWithWhereWithoutAksesInput = {
    where: hak_aksesScalarWhereInput
    data: XOR<hak_aksesUpdateManyMutationInput, hak_aksesUncheckedUpdateManyWithoutAksesInput>
  }

  export type hak_aksesCreateWithoutFungsiInput = {
    role: roleCreateNestedOneWithoutHak_aksesInput
    akses: aksesCreateNestedOneWithoutHak_aksesInput
  }

  export type hak_aksesUncheckedCreateWithoutFungsiInput = {
    id?: number
    role_id: number
    akses_id: number
  }

  export type hak_aksesCreateOrConnectWithoutFungsiInput = {
    where: hak_aksesWhereUniqueInput
    create: XOR<hak_aksesCreateWithoutFungsiInput, hak_aksesUncheckedCreateWithoutFungsiInput>
  }

  export type hak_aksesCreateManyFungsiInputEnvelope = {
    data: hak_aksesCreateManyFungsiInput | hak_aksesCreateManyFungsiInput[]
    skipDuplicates?: boolean
  }

  export type hak_aksesUpsertWithWhereUniqueWithoutFungsiInput = {
    where: hak_aksesWhereUniqueInput
    update: XOR<hak_aksesUpdateWithoutFungsiInput, hak_aksesUncheckedUpdateWithoutFungsiInput>
    create: XOR<hak_aksesCreateWithoutFungsiInput, hak_aksesUncheckedCreateWithoutFungsiInput>
  }

  export type hak_aksesUpdateWithWhereUniqueWithoutFungsiInput = {
    where: hak_aksesWhereUniqueInput
    data: XOR<hak_aksesUpdateWithoutFungsiInput, hak_aksesUncheckedUpdateWithoutFungsiInput>
  }

  export type hak_aksesUpdateManyWithWhereWithoutFungsiInput = {
    where: hak_aksesScalarWhereInput
    data: XOR<hak_aksesUpdateManyMutationInput, hak_aksesUncheckedUpdateManyWithoutFungsiInput>
  }

  export type roleCreateWithoutHak_aksesInput = {
    nama: string
    karyawans?: karyawanCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateWithoutHak_aksesInput = {
    id?: number
    nama: string
    karyawans?: karyawanUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleCreateOrConnectWithoutHak_aksesInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutHak_aksesInput, roleUncheckedCreateWithoutHak_aksesInput>
  }

  export type fungsiCreateWithoutHak_aksesInput = {
    nama: string
  }

  export type fungsiUncheckedCreateWithoutHak_aksesInput = {
    id?: number
    nama: string
  }

  export type fungsiCreateOrConnectWithoutHak_aksesInput = {
    where: fungsiWhereUniqueInput
    create: XOR<fungsiCreateWithoutHak_aksesInput, fungsiUncheckedCreateWithoutHak_aksesInput>
  }

  export type aksesCreateWithoutHak_aksesInput = {
    nama: string
  }

  export type aksesUncheckedCreateWithoutHak_aksesInput = {
    id?: number
    nama: string
  }

  export type aksesCreateOrConnectWithoutHak_aksesInput = {
    where: aksesWhereUniqueInput
    create: XOR<aksesCreateWithoutHak_aksesInput, aksesUncheckedCreateWithoutHak_aksesInput>
  }

  export type roleUpsertWithoutHak_aksesInput = {
    update: XOR<roleUpdateWithoutHak_aksesInput, roleUncheckedUpdateWithoutHak_aksesInput>
    create: XOR<roleCreateWithoutHak_aksesInput, roleUncheckedCreateWithoutHak_aksesInput>
    where?: roleWhereInput
  }

  export type roleUpdateToOneWithWhereWithoutHak_aksesInput = {
    where?: roleWhereInput
    data: XOR<roleUpdateWithoutHak_aksesInput, roleUncheckedUpdateWithoutHak_aksesInput>
  }

  export type roleUpdateWithoutHak_aksesInput = {
    nama?: StringFieldUpdateOperationsInput | string
    karyawans?: karyawanUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateWithoutHak_aksesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    karyawans?: karyawanUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type fungsiUpsertWithoutHak_aksesInput = {
    update: XOR<fungsiUpdateWithoutHak_aksesInput, fungsiUncheckedUpdateWithoutHak_aksesInput>
    create: XOR<fungsiCreateWithoutHak_aksesInput, fungsiUncheckedCreateWithoutHak_aksesInput>
    where?: fungsiWhereInput
  }

  export type fungsiUpdateToOneWithWhereWithoutHak_aksesInput = {
    where?: fungsiWhereInput
    data: XOR<fungsiUpdateWithoutHak_aksesInput, fungsiUncheckedUpdateWithoutHak_aksesInput>
  }

  export type fungsiUpdateWithoutHak_aksesInput = {
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type fungsiUncheckedUpdateWithoutHak_aksesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type aksesUpsertWithoutHak_aksesInput = {
    update: XOR<aksesUpdateWithoutHak_aksesInput, aksesUncheckedUpdateWithoutHak_aksesInput>
    create: XOR<aksesCreateWithoutHak_aksesInput, aksesUncheckedCreateWithoutHak_aksesInput>
    where?: aksesWhereInput
  }

  export type aksesUpdateToOneWithWhereWithoutHak_aksesInput = {
    where?: aksesWhereInput
    data: XOR<aksesUpdateWithoutHak_aksesInput, aksesUncheckedUpdateWithoutHak_aksesInput>
  }

  export type aksesUpdateWithoutHak_aksesInput = {
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type aksesUncheckedUpdateWithoutHak_aksesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateManyKaryawanInput = {
    id?: number
    email: string
    password: string
  }

  export type userUpdateWithoutKaryawanInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateWithoutKaryawanInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyWithoutKaryawanInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type karyawanCreateManyRoleInput = {
    id?: number
    nama: string
    nik: string
    alamat: string
    kontak: string
    tanggal_lahir: Date | string
    jenis_kelamin: string
    no_rekening: string
  }

  export type hak_aksesCreateManyRoleInput = {
    id?: number
    fungsi_id: number
    akses_id: number
  }

  export type karyawanUpdateWithoutRoleInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    no_rekening?: StringFieldUpdateOperationsInput | string
    users?: userUpdateManyWithoutKaryawanNestedInput
  }

  export type karyawanUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    no_rekening?: StringFieldUpdateOperationsInput | string
    users?: userUncheckedUpdateManyWithoutKaryawanNestedInput
  }

  export type karyawanUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    kontak?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    jenis_kelamin?: StringFieldUpdateOperationsInput | string
    no_rekening?: StringFieldUpdateOperationsInput | string
  }

  export type hak_aksesUpdateWithoutRoleInput = {
    fungsi?: fungsiUpdateOneRequiredWithoutHak_aksesNestedInput
    akses?: aksesUpdateOneRequiredWithoutHak_aksesNestedInput
  }

  export type hak_aksesUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    fungsi_id?: IntFieldUpdateOperationsInput | number
    akses_id?: IntFieldUpdateOperationsInput | number
  }

  export type hak_aksesUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    fungsi_id?: IntFieldUpdateOperationsInput | number
    akses_id?: IntFieldUpdateOperationsInput | number
  }

  export type hak_aksesCreateManyAksesInput = {
    id?: number
    role_id: number
    fungsi_id: number
  }

  export type hak_aksesUpdateWithoutAksesInput = {
    role?: roleUpdateOneRequiredWithoutHak_aksesNestedInput
    fungsi?: fungsiUpdateOneRequiredWithoutHak_aksesNestedInput
  }

  export type hak_aksesUncheckedUpdateWithoutAksesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    fungsi_id?: IntFieldUpdateOperationsInput | number
  }

  export type hak_aksesUncheckedUpdateManyWithoutAksesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    fungsi_id?: IntFieldUpdateOperationsInput | number
  }

  export type hak_aksesCreateManyFungsiInput = {
    id?: number
    role_id: number
    akses_id: number
  }

  export type hak_aksesUpdateWithoutFungsiInput = {
    role?: roleUpdateOneRequiredWithoutHak_aksesNestedInput
    akses?: aksesUpdateOneRequiredWithoutHak_aksesNestedInput
  }

  export type hak_aksesUncheckedUpdateWithoutFungsiInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    akses_id?: IntFieldUpdateOperationsInput | number
  }

  export type hak_aksesUncheckedUpdateManyWithoutFungsiInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    akses_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use KaryawanCountOutputTypeDefaultArgs instead
     */
    export type KaryawanCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = KaryawanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AksesCountOutputTypeDefaultArgs instead
     */
    export type AksesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AksesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FungsiCountOutputTypeDefaultArgs instead
     */
    export type FungsiCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FungsiCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use karyawanDefaultArgs instead
     */
    export type karyawanArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = karyawanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use roleDefaultArgs instead
     */
    export type roleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = roleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use aksesDefaultArgs instead
     */
    export type aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = aksesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use fungsiDefaultArgs instead
     */
    export type fungsiArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = fungsiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use hak_aksesDefaultArgs instead
     */
    export type hak_aksesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = hak_aksesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}