// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model produk_item {
  id            Int      @id @default(autoincrement())
  kode_produk   String   @db.VarChar(50)
  sku           String   @db.VarChar(50)
  nama_produk   String   @db.VarChar(50)
  stok          Int
  harga_jual    Float
  produksi_id     Int      // This is the reference to the 'produksi' table

  // Define the relationship to the 'produksi' table
  produksi        produksi @relation(fields: [produksi_id], references: [id])
  detail_diskon detail_diskon[]
  detail_pengecekan_produk   detail_pengecekan_produk[]
  detail_gawangan detail_gawangan[]
  detail_pembelian_produk detail_pembelian_produk[]
}
model produksi{
  id                  Int       @id @default(autoincrement())
  mulai               DateTime
  selesai             DateTime
  kode_produk         String
  jumlah              Int
  ukuran              String    @db.VarChar(50)
  warna               String    @db.VarChar(50)
  biaya               Float
  pembuat_id          Int
  kategori_produk_id  Int

  // Define relationships with other tables (assuming they exist)
  // Replace "Pembuat" and "Kategori_Produk" with the actual table names
  pembuat             pembuat   @relation(fields: [pembuat_id], references: [id])
  kategori_produk     kategori_produk @relation(fields: [kategori_produk_id], references: [id])

 produk_item produk_item[]
 bahan_produksi bahan_produksi[]

}
model kategori_produk{
  id            Int      @id @default(autoincrement())
  kategori      String   @db.VarChar(50)
  produksi produksi[]
}
model pembuat{
  id            Int      @id @default(autoincrement())
  nama_pembuat  String   @db.VarChar(50)
  produksi produksi[]
}
model bahan_produksi {
  id             Int     @id @default(autoincrement())
  stok_terpakai  Float
  produksi_id    Int
  stok_bahan_id  Int

  // Define relationships with other tables (assuming they exist)
  // Replace "Produksi" and "Stok_Bahan" with the actual table names
  produksi       produksi @relation(fields: [produksi_id], references: [id])
  stok_bahan     stok_bahan @relation(fields: [stok_bahan_id], references: [id])
}
model stok_bahan {
  id         Int      @id @default(autoincrement())
  kode_bahan String   @db.VarChar(50)
  nama_bahan String   @db.VarChar(50)
  ukuran     Float
  satuan     String   @db.VarChar(50)
  stok       Int

  // Define relationships with other tables (if needed)
  // For example, if you have a relationship to 'Bahan_Produksi':
  bahan_produksi bahan_produksi[]
  detail_pengecekan_bahan detail_pengecekan_bahan[]
  detail_pemesanan_bahan detail_pemesanan_bahan[]
  }
  model detail_pengecekan_produk {
  id                  Int      @id @default(autoincrement())
  pengecekan_produk_id Int
  produk_item_id      Int
  kondisi_produk_id   Int
  jumlah              Float

  // Define relationships with other tables (assuming they exist)
  // Replace "Pengecekan_Produk", "Produk_Item", and "Kondisi_Produk" with the actual table names
  pengecekan_produk   pengecekan_produk @relation(fields: [pengecekan_produk_id], references: [id])
  produk_item         produk_item      @relation(fields: [produk_item_id], references: [id])
  kondisi_produk      kondisi_produk   @relation(fields: [kondisi_produk_id], references: [id])
}
model pengecekan_produk {
  id           Int      @id @default(autoincrement())
  nama_pic     String   @db.VarChar(50)
  tanggal      DateTime

  detail_pengecekan_produk detail_pengecekan_produk[] // Define the one-to-many relationship
}

model kondisi_produk {
  id      Int      @id @default(autoincrement())
  kondisi String   @db.VarChar(50)


    detail_pengecekan_produk detail_pengecekan_produk[] // Define the one-to-many relationship
}
model detail_pengecekan_bahan {
  id                  Int      @id @default(autoincrement())
  pengecekan_bahan_id Int
  stok_bahan_id       Int
  kondisi_bahan_id    Int
  jumlah              Float

  // Define relationships with other tables (assuming they exist)
  // Replace "pengecekan_bahan", "Stok_Bahan", and "kondisi_bahan" with the actual table names
  pengecekan_bahan    pengecekan_bahan @relation(fields: [pengecekan_bahan_id], references: [id])
  stok_bahan          stok_bahan       @relation(fields: [stok_bahan_id], references: [id])
  kondisi_bahan       kondisi_bahan    @relation(fields: [kondisi_bahan_id], references: [id])
}
model pengecekan_bahan {
  id           Int      @id @default(autoincrement())
  nama_pic     String   @db.VarChar(50)
  tanggal      DateTime
  
  detail_pengecekan_bahan detail_pengecekan_bahan[]
   // Define the one-to-many relationship
}

model kondisi_bahan {
  id      Int      @id @default(autoincrement())
  kondisi String   @db.VarChar(50)

  // Define the many-to-one relationship to pengecekan_bahan
  
  pengecekan_bahan_id Int
  detail_pengecekan_bahan detail_pengecekan_bahan[]
}
model detail_pemesanan_bahan {
  id                Int      @id @default(autoincrement())
  stok_bahan_id     Int
  pemesanan_bahan_id Int
  jumlah            Float
  harga             Float   // Assuming you want to use a floating-point number for "harga"

  // Define relationships with other tables (assuming they exist)
  // Replace "Pemesanan_Bahan" and "Stok_Bahan" with the actual table names
  pemesanan_bahan   pemesanan_bahan @relation(fields: [pemesanan_bahan_id], references: [id])
  stok_bahan        stok_bahan      @relation(fields: [stok_bahan_id], references: [id])
}
model pemesanan_bahan {
  id                   Int       @id @default(autoincrement())
  tanggal_pesan        DateTime
  tanggal_terima       DateTime
  pic_pemesan          String    @db.VarChar(50)
  kontak_pic_pemesan   String    @db.VarChar(50)
  supplier_id          Int

  // Define relationships with other tables (assuming they exist)
  // Replace "Supplier" with the actual table name for the supplier
  supplier             supplier  @relation(fields: [supplier_id], references: [id])

  // Define a one-to-many relationship with detail_pemesanan_bahan
  detail_pemesanan_bahan detail_pemesanan_bahan[]
}
model supplier {
  id          Int      @id @default(autoincrement())
  nama_supplier String   @db.VarChar(50)
  alamat      String   @db.VarChar(50)
  kontak      String   @db.VarChar(50)
  nama_pic    String   @db.VarChar(50)
  kontak_pic  String   @db.VarChar(50)

  // Define a one-to-many relationship with Pemesanan_Bahan
  pemesanan_bahan pemesanan_bahan[]
}
model detail_gawangan {
  id              Int      @id @default(autoincrement())
  gawangan_id     Int
  produk_item_id  Int
  jumlah          Int

  // Define relationships with other tables (assuming they exist)
  // Replace "Gawangan" and "Produk_Item" with the actual table names
  gawangan        gawangan    @relation(fields: [gawangan_id], references: [id])
  produk_item     produk_item @relation(fields: [produk_item_id], references: [id])
}
model gawangan {
  id          Int      @id @default(autoincrement())
  nama_gawangan String   @db.VarChar(50)
  outlet_id   Int

  // Define relationships with other tables (assuming they exist)
  // Replace "Outlet" with the actual table name for the outlet
  outlet      outlet   @relation(fields: [outlet_id], references: [id])

  // Define a one-to-many relationship with detail_gawangan
  detail_gawangans detail_gawangan[]
  detail_pembelian_produk detail_pembelian_produk[]
}
model outlet {
  id            Int      @id @default(autoincrement())
  nama_outlet   String   @db.VarChar(50)
  alamat        String   @db.VarChar(50)
  nama_pic      String   @db.VarChar(50)
  kontak_pic    String   @db.VarChar(50)


  // Define a one-to-many relationship with Gawangan
  gawangan gawangan[]
}
model pembelian_produk {
  id                Int      @id @default(autoincrement())
  tanggal_pembelian DateTime
  nama_pembeli      String   @db.VarChar(50)
  kontak_pembeli    String   @db.VarChar(50)
  user_id           Int   // Assuming "user" is a string field

  // Define a one-to-many relationship with detail_pembelian_produk
    user       user @relation(fields: [user_id], references: [id])

  detail_diskon    detail_diskon[]
  detail_pembelian_produk detail_pembelian_produk[]
}
model user {
  id           Int      @id @default(autoincrement())
  nama_lengkap String   @db.VarChar(50)
  kontak       String   @db.VarChar(50)
  email        String   @db.VarChar(50)
  username     String   @db.VarChar(50)  // Note: You had a typo in "username"
  password     String   // Assuming you will store a hashed password here

   pembelian_produk pembelian_produk[] 
}

model detail_pembelian_produk {
  id                Int      @id @default(autoincrement())
  jumlah            Int
  diskon_id         Int      // Assuming it's a foreign key to a "Diskon" table
  produk_item_id    Int
  pembelian_produk_id Int
  gawangan_id       Int      // Assuming it's a foreign key to a "Gawangan" table

  // Define relationships with other tables (assuming they exist)
  // Replace "Diskon," "Produk_Item," "Pembelian_Produk," and "Gawangan" with the actual table names
  diskon            diskon   @relation(fields: [diskon_id], references: [id])
  produk_item       produk_item @relation(fields: [produk_item_id], references: [id])
  pembelian_produk  pembelian_produk @relation(fields: [pembelian_produk_id], references: [id])
  gawangan          gawangan @relation(fields: [gawangan_id], references: [id])
}
model diskon {
  id                Int       @id @default(autoincrement())
  nama_diskon       String    @db.VarChar(50)
  tipe_diskon       TipeDiskon
  jumlah_diskon     Float
  tanggal_mulai     DateTime
  tanggal_selesai   DateTime
  // produk_item_id    Int?      // Reference to Produk_Item (optional)
  // pembelian_produk_id Int?    // Reference to Pembelian_Produk (optional)

  // Define relationships with other tables (if needed)
  
  detail_pembelian_produk detail_pembelian_produk[]
  detail_diskon detail_diskon[]
}

enum TipeDiskon {
  PERCENTAGE
  AMOUNT
}
model detail_diskon {
  id                Int       @id @default(autoincrement())
  diskon_id         Int
  produk_item_id    Int?
  pembelian_produk_id Int?
  jumlah            Float
  jumlah_diskon     Float

  // Define relationships with other tables
  diskon            diskon   @relation(fields: [diskon_id], references: [id])
  produk_item       produk_item?    @relation(fields: [produk_item_id], references: [id])
  pembelian_produk  pembelian_produk? @relation(fields: [pembelian_produk_id], references: [id])
}






